<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AIS3 pre-exam 2025</title>
    <url>/2025/07/11/ais3preexam/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>這是我的第一次CTF<br>打得很爛writeup也寫得很爛<br><del>為了各位的眼睛著想請不要繼續往下看</del></p>
<span id="more"></span>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="tomorin-db"><a href="#tomorin-db" class="headerlink" title="tomorin db"></a>tomorin db</h2><h3 id="題目觀察"><a href="#題目觀察" class="headerlink" title="題目觀察"></a>題目觀察</h3><p>首先點進題目提供的網址 <a href="http://chals1.ais3.org:30000/">http://chals1.ais3.org:30000/</a> :<br><img src="/img/ais3/tomorin.webp"><br>可以看到其中有四個檔案</p>
<ul>
<li>cute.jpg</li>
<li>flag</li>
<li>is.jpg</li>
<li>tomorin.jpg</li>
</ul>
<p>其中三個是圖片,<strong>但flag點進去會跳轉到<a href="https://www.youtube.com/watch?v=lQuWN0biOBU">MyGO!!!!!的聿日箋秋</a></strong> <del>又在GO</del><br><img src="/img/ais3/MyGO.webp"></p>
<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>既然flag文件確實存在,但是&#x2F;flag路徑做了特殊處理,那我們可以嘗試繞過&#x2F;flag這個路徑</p>
<h3 id="繞過思路"><a href="#繞過思路" class="headerlink" title="繞過思路"></a>繞過思路</h3><p>經過嘗試,我發現如果我們用URL編碼 <strong>(%2f)</strong> 再加上flag就不會被轉址<br>所以我在根網址後加上 <em><strong>&#x2F;%2fflag</strong></em><br><img src="/img/ais3/%E6%88%90%E5%8A%9F%E8%A8%AA%E5%95%8F.webp"></p>
<p>我們就可以得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AIS3&#123;G01ang_H2v3_a_c0O1_way!!!_Us3ing_C0NN3ct_M3Th07_L0l@T0m0r1n_1s_cute_D0_yo7_L0ve_t0MoRIN?&#125; </span><br></pre></td></tr></table></figure>
<h2 id="Login-Screen-1"><a href="#Login-Screen-1" class="headerlink" title="Login Screen 1"></a>Login Screen 1</h2><h3 id="頁面分析"><a href="#頁面分析" class="headerlink" title="頁面分析"></a>頁面分析</h3><p>點進網頁後我們看到了一個登入介面<br><img src="/img/ais3/%E7%99%BB%E5%85%A5%E7%95%AB%E9%9D%A2.webp"><br>包含:</p>
<ul>
<li>Username 輸入框</li>
<li>Password 輸入框</li>
<li>Login 按鈕</li>
</ul>
<h3 id="注入攻擊"><a href="#注入攻擊" class="headerlink" title="注入攻擊"></a>注入攻擊</h3><p><img src="/img/ais3/FLAGG.webp"><br>我們就得到FLAG:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AIS3&#123;1.Es55y_SQL_1nJ3ct10n_w1th_2fa_IuABDADGeP0&#125;</span><br></pre></td></tr></table></figure>
<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="Ramen-CTF"><a href="#Ramen-CTF" class="headerlink" title="Ramen CTF"></a>Ramen CTF</h2><p>這題是我覺得最有趣的</p>
<h3 id="題目觀察-1"><a href="#題目觀察-1" class="headerlink" title="題目觀察"></a>題目觀察</h3><p>他給我們了一張圖片<br><img src="/img/ais3/chal.webp"><br>裡面有價值的只有那張發票,我就想到用發票的資訊是不是能查到一些資料<br><img src="/img/ais3/%E7%99%BC%E7%A5%A8.webp"></p>
<p>可以得到以下資訊:</p>
<ul>
<li>平和….</li>
<li>MF開頭</li>
<li>2025&#x2F;04&#x2F;13的發票</li>
<li>隨機碼 7095</li>
<li>賣方編號 3478592…</li>
</ul>
<p>接下來用QRcode掃描程式得知:<br><img src="/img/ais3/QRcode.webp"></p>
<ul>
<li>發票完整號碼 MF16879911</li>
<li>餐點是蝦拉麵</li>
</ul>
<h3 id="地址尋找"><a href="#地址尋找" class="headerlink" title="地址尋找"></a>地址尋找</h3><p>將上面的資料輸入<a href="https://www.einvoice.nat.gov.tw/portal/btc/audit/btc601w/search">財政部電子發票整合平台</a></p>
<p><img src="/img/ais3/%E5%AE%8C%E6%95%B4%E8%B3%87%E8%A8%8A.webp"><br>我們就得到了地址,再把地址輸入Google Map<br>我們可以找到一家 <strong>樂山溫泉拉麵</strong><br><img src="/img/ais3/Map.webp"></p>
<p>我們就可以得到Flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AIS3&#123;樂山溫泉拉麵:蝦拉麵&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AIS3-Tiny-Server-Web-Misc"><a href="#AIS3-Tiny-Server-Web-Misc" class="headerlink" title="AIS3 Tiny Server - Web &#x2F; Misc"></a>AIS3 Tiny Server - Web &#x2F; Misc</h2><p>首先點進題目提供的網址用好token之後<br>我們會來到 <a href="http://chals1.ais3.org:20096/index.html">http://chals1.ais3.org:20096/index.html</a><br><img src="/img/ais3/Tiny-server.webp"><br>我就把常見的隱藏路徑都加上去,多次嘗試後發現<strong>加&#x2F;&#x2F;可以叫出文件目錄</strong><br><img src="/img/ais3/%E7%9B%AE%E9%8C%84.webp"><br>裡面有很多檔案,我就點了檔名有flag的<strong>readable_flag_jkO47trw1ctKlOIFC7smx7hivqoCPL8Y</strong><br><img src="/img/ais3/FLAG.webp"><br>我們就得到了flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AIS3&#123;tInY_we8_53Rv3R_wi7H_fILe_8R0Ws1nG_AS_@_FeAtURe&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h2><h3 id="我就直接打上去owo"><a href="#我就直接打上去owo" class="headerlink" title="我就直接打上去owo"></a>我就直接打上去owo</h3><p><img src="/img/ais3/welcome.webp"></p>
<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="SlowECDSA"><a href="#SlowECDSA" class="headerlink" title="SlowECDSA"></a>SlowECDSA</h2><p>看到題目後，我發現這就是一個經典的LCG攻擊題。ECDSA 的安全性完全依賴於隨機數 k 的不可預測性，如果服務器用 LCG 來生成這些隨機數，那就不難了</p>
<h3 id="收集範本"><a href="#收集範本" class="headerlink" title="收集範本"></a><strong>收集範本</strong></h3><p>既然服務器提供 <code>get_example</code> 功能，我就先調用兩次，獲取兩個不同簽名。這樣我就能得到使用連續 LCG 隨機數的簽名對</p>
<h3 id="數學關係"><a href="#數學關係" class="headerlink" title="數學關係"></a><strong>數學關係</strong></h3><p>根據Perplexity的資料:<br>ECDSA 簽名公式是：<br>$$ s &#x3D; k^{-1} \times (h + r \times d) \bmod n $$</p>
<p>如果 k₁ 和 k₂ 有線性關係：k₂ &#x3D; (a × k₁ + c) mod n，那我們就能建一個關於 d 的方程式</p>
<h2 id="求解"><a href="#求解" class="headerlink" title="求解"></a><strong>求解</strong></h2><p>從兩個簽名的關係中，可以推導出：<br>$$ s₂^{-1} \times (h + r₂ \times d) \equiv a \times s₁^{-1} \times (h + r₁ \times d) + c \pmod{n} $$</p>
<p>解這個線性方程就能得到 d。</p>
<h3 id="預測"><a href="#預測" class="headerlink" title="預測"></a><strong>預測</strong></h3><p>有了私鑰，我們就能反推出真正的 k₁，然後利用 LCG 的線性性質預測 k₃。</p>
<h3 id="偽造簽名"><a href="#偽造簽名" class="headerlink" title="偽造簽名"></a><strong>偽造簽名</strong></h3><p>用預測的 k₃ 和已知的私鑰，為目標消息 “give_me_flag” 生成完全有效的簽名。</p>
<h3 id="攻擊"><a href="#攻擊" class="headerlink" title="攻擊"></a><strong>攻擊</strong></h3><p>我叫AI寫了一個 Python 腳本來實現這個攻擊：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 橢圓曲線參數 (secp256k1)</span></span><br><span class="line">p = <span class="number">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f</span></span><br><span class="line">a_curve = <span class="number">0</span></span><br><span class="line">b_curve = <span class="number">7</span></span><br><span class="line">n = <span class="number">0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LCG 參數</span></span><br><span class="line">a = <span class="number">0x5deece66d</span></span><br><span class="line">c = <span class="number">0xb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_example_signature</span>(<span class="params">conn</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;獲取示例簽名&quot;&quot;&quot;</span></span><br><span class="line">    conn.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    response = conn.recvuntil(<span class="string">b&#x27;Choice: &#x27;</span>).decode()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析 r 和 s 值</span></span><br><span class="line">    r_match = re.search(<span class="string">r&#x27;r=0x([0-9a-f]+)&#x27;</span>, response)</span><br><span class="line">    s_match = re.search(<span class="string">r&#x27;s=0x([0-9a-f]+)&#x27;</span>, response)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> r_match <span class="keyword">and</span> s_match:</span><br><span class="line">        r = <span class="built_in">int</span>(r_match.group(<span class="number">1</span>), <span class="number">16</span>)</span><br><span class="line">        s = <span class="built_in">int</span>(s_match.group(<span class="number">1</span>), <span class="number">16</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] Received example: msg=&#x27;example_msg&#x27;, r=0x<span class="subst">&#123;r:x&#125;</span>, s=0x<span class="subst">&#123;s:x&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;r&#x27;</span>: r, <span class="string">&#x27;s&#x27;</span>: s&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;無法解析簽名&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_for_private_key</span>(<span class="params">sig1, sig2, h, n, a, c</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;求解私鑰&quot;&quot;&quot;</span></span><br><span class="line">    r1, s1 = sig1[<span class="string">&#x27;r&#x27;</span>], sig1[<span class="string">&#x27;s&#x27;</span>]</span><br><span class="line">    r2, s2 = sig2[<span class="string">&#x27;r&#x27;</span>], sig2[<span class="string">&#x27;s&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 建立線性同餘方程求解私鑰</span></span><br><span class="line">    <span class="comment"># s2^-1 * (h + r2 * d) ≡ a * s1^-1 * (h + r1 * d) + c (mod n)</span></span><br><span class="line">    </span><br><span class="line">    s1_inv = <span class="built_in">pow</span>(s1, -<span class="number">1</span>, n)</span><br><span class="line">    s2_inv = <span class="built_in">pow</span>(s2, -<span class="number">1</span>, n)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重新整理方程式</span></span><br><span class="line">    <span class="comment"># s2_inv * h + s2_inv * r2 * d ≡ a * s1_inv * h + a * s1_inv * r1 * d + c (mod n)</span></span><br><span class="line">    <span class="comment"># (s2_inv * r2 - a * s1_inv * r1) * d ≡ a * s1_inv * h - s2_inv * h + c (mod n)</span></span><br><span class="line">    </span><br><span class="line">    coeff_d = (s2_inv * r2 - a * s1_inv * r1) % n</span><br><span class="line">    rhs = (a * s1_inv * h - s2_inv * h + c) % n</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 求解 d</span></span><br><span class="line">    coeff_d_inv = <span class="built_in">pow</span>(coeff_d, -<span class="number">1</span>, n)</span><br><span class="line">    d = (coeff_d_inv * rhs) % n</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict_next_k</span>(<span class="params">sk, sig1, h, n, a, c</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;預測下一個隨機數&quot;&quot;&quot;</span></span><br><span class="line">    r1, s1 = sig1[<span class="string">&#x27;r&#x27;</span>], sig1[<span class="string">&#x27;s&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 計算實際的 k1</span></span><br><span class="line">    s1_inv = <span class="built_in">pow</span>(s1, -<span class="number">1</span>, n)</span><br><span class="line">    k1_actual = (s1_inv * (h + r1 * sk)) % n</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] Calculated k1_actual: 0x<span class="subst">&#123;k1_actual:x&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 計算 k2</span></span><br><span class="line">    k2_actual = (a * k1_actual + c) % n</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 預測 k3</span></span><br><span class="line">    k3_for_flag = (a * k2_actual + c) % n</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] Predicted k3 for flag signing: 0x<span class="subst">&#123;k3_for_flag:x&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> k3_for_flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forge_signature</span>(<span class="params">k, h, sk, G, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;偽造簽名&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 計算 r</span></span><br><span class="line">    point = k * G</span><br><span class="line">    r = point.xy()[<span class="number">0</span>] % n</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 計算 s</span></span><br><span class="line">    k_inv = <span class="built_in">pow</span>(k, -<span class="number">1</span>, n)</span><br><span class="line">    s = (k_inv * (h + r * sk)) % n</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 連接到服務器</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Opening connection to chals1.ais3.org on port 19000: Done&quot;</span>)</span><br><span class="line">    conn = remote(<span class="string">&#x27;chals1.ais3.org&#x27;</span>, <span class="number">19000</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 跳過初始訊息</span></span><br><span class="line">    conn.recvuntil(<span class="string">b&#x27;Choice: &#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 獲取第一個示例簽名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Getting first example signature...&quot;</span>)</span><br><span class="line">    example1 = get_example_signature(conn)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 獲取第二個示例簽名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Getting second example signature...&quot;</span>)</span><br><span class="line">    example2 = get_example_signature(conn)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 建立橢圓曲線</span></span><br><span class="line">    E = EllipticCurve(GF(p), [a_curve, b_curve])</span><br><span class="line">    G = E(<span class="number">0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798</span>,</span><br><span class="line">          <span class="number">0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 計算 example_msg 的哈希</span></span><br><span class="line">    h_ex = <span class="built_in">int</span>.from_bytes(sha1(<span class="string">b&quot;example_msg&quot;</span>).digest(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] h_ex (for &#x27;example_msg&#x27;) = 0x<span class="subst">&#123;h_ex:x&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 求解私鑰</span></span><br><span class="line">    sk = solve_for_private_key(example1, example2, h_ex, n, a, c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Recovered private key (sk): 0x<span class="subst">&#123;sk:x&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 預測下一個隨機數</span></span><br><span class="line">    k3_predicted = predict_next_k(sk, example1, h_ex, n, a, c)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 計算 give_me_flag 的哈希</span></span><br><span class="line">    h_flag = <span class="built_in">int</span>.from_bytes(sha1(<span class="string">b&quot;give_me_flag&quot;</span>).digest(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] h_flag (for &#x27;give_me_flag&#x27;) = 0x<span class="subst">&#123;h_flag:x&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 偽造簽名</span></span><br><span class="line">    r_flag, s_flag = forge_signature(k3_predicted, h_flag, sk, G, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Forged signature for &#x27;give_me_flag&#x27;: r=0x<span class="subst">&#123;r_flag:x&#125;</span>, s=0x<span class="subst">&#123;s_flag:x&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提交偽造的簽名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Sending forged signature to verify...&quot;</span>)</span><br><span class="line">    conn.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    conn.sendline(<span class="built_in">hex</span>(r_flag)[<span class="number">2</span>:].encode())</span><br><span class="line">    conn.sendline(<span class="built_in">hex</span>(s_flag)[<span class="number">2</span>:].encode())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 接收回應</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Server response:&quot;</span>)</span><br><span class="line">    response = conn.recvall().decode()</span><br><span class="line">    <span class="built_in">print</span>(response)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 關閉連接</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>執行後,我們得到了Flag：<br><img src="/img/ais3/response.webp"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AIS3&#123;Aff1n3_nounc3s_c@N_bE_broke_ezily...&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>根據題目提供的python程式,我們看到了這個加密方案的缺陷:<br><strong>當明文相對於密鑰較小時，XOR 運算的結果主要由密鑰決定</strong><br>所以我們可以利用數學關係逆向攻擊<br><img src="/img/ais3/%E7%BC%BA%E9%99%B7.webp"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h3><p>現在我們知道加密公式為:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encrypted_int = flag_int ⊕ (rand_num²)</span><br></pre></td></tr></table></figure>
<p>當 flag_int 遠小於 rand_num² 時，我們有:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encrypted_int ≈ rand_num²</span><br></pre></td></tr></table></figure>
<p>那我們就可以逆推flag了</p>
<h3 id="攻擊-1"><a href="#攻擊-1" class="headerlink" title="攻擊"></a><strong>攻擊</strong></h3><p>我們先計算近似隨機數:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">approx_rand_num = math.isqrt(encrypted_int)</span><br></pre></td></tr></table></figure>
<p>再搜索偏移亮:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> offset <span class="keyword">in</span> <span class="built_in">range</span>(-search_width, search_width + <span class="number">1</span>):</span><br><span class="line">    rand_num_candidate = approx_rand_num + offset</span><br></pre></td></tr></table></figure>
<p>接下來對每個候選隨機數，計算其平方並嘗試解密:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key_squared = rand_num_candidate ** <span class="number">2</span></span><br><span class="line">flag_candidate = encrypted_int ^ key_squared</span><br></pre></td></tr></table></figure>
<p>基本過濾:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 排除無效結果</span></span><br><span class="line"><span class="keyword">if</span> flag_candidate == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 檢查長度合理性</span></span><br><span class="line">num_bits = flag_candidate.bit_length()</span><br><span class="line">byte_len = (num_bits + <span class="number">7</span>) // <span class="number">8</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">5</span> &lt; byte_len &lt; <span class="number">80</span>):</span><br><span class="line">    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<p>轉換為字串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">int_to_bytes</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">    byte_length = (n.bit_length() + <span class="number">7</span>) // <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> n.to_bytes(byte_length, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag_bytes_candidate = int_to_bytes(flag_candidate)</span><br></pre></td></tr></table></figure>
<p>最後一部,解碼</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        potential_flag = flag_bytes_candidate.decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 檢查 AIS3 格式</span></span><br><span class="line">        <span class="keyword">if</span> (potential_flag.startswith(<span class="string">&#x27;AIS3&#123;&#x27;</span>) <span class="keyword">and</span> </span><br><span class="line">            potential_flag.endswith(<span class="string">&#x27;&#125;&#x27;</span>) <span class="keyword">and</span> </span><br><span class="line">            potential_flag.isprintable()):</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[成功] 找到 AIS3 flag，offset: <span class="subst">&#123;offset&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;候選 rand_num: <span class="subst">&#123;<span class="built_in">hex</span>(rand_num_candidate)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Flag bytes: <span class="subst">&#123;flag_bytes_candidate&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;解密結果: <span class="subst">&#123;potential_flag&#125;</span>&quot;</span>)</span><br><span class="line">            found_flag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;處理 offset <span class="subst">&#123;offset&#125;</span> 時發生錯誤: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> found_flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n在範圍 [<span class="subst">&#123;-search_width&#125;</span>, <span class="subst">&#123;search_width&#125;</span>] 內未找到有效 flag&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;建議增加 search_width 或檢查加密假設&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>運行後我們就拿到了flag:<br><img src="/img/ais3/print.webp"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AIS3&#123;no_more_junks...plz&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Hill"><a href="#Hill" class="headerlink" title="Hill"></a>Hill</h2><p>系統使用兩個矩陣 A 和 B：</p>
<ul>
<li><p>第一個分組：c₀ &#x3D; A × m₀</p>
</li>
<li><p>後續分組：cᵢ &#x3D; A × mᵢ + B × mᵢ₋₁</p>
</li>
</ul>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a><strong>思路</strong></h3><p>(伺服器只允許一次 <code>input()</code>)<br>我需要一個特殊的輸入序列來同時恢復 A 和 B 矩陣。我想到用標準基向量:<br><code>載荷 = [e₀, 0, e₁, 0, e₂, 0, ..., e₇, 0]</code></p>
<p>當服務器處理這個載荷時：</p>
<ul>
<li>c₀ &#x3D; A × e₀  得到 A 的 0 </li>
<li>c₁ &#x3D; A × 0 + B × e₀  得到 B 的 0 </li>
<li>c₂ &#x3D; A × e₁  得到 A 的 1 </li>
<li>以此類推…</li>
</ul>
<p>恢復 A 和 B 後，計算 A 的逆矩陣，然後逆向解密目標 FLAG</p>
<h3 id="攻擊-2"><a href="#攻擊-2" class="headerlink" title="攻擊"></a><strong>攻擊</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> Matrix</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定參數</span></span><br><span class="line">HOST = <span class="string">&#x27;chals1.ais3.org&#x27;</span></span><br><span class="line">PORT = <span class="number">18000</span></span><br><span class="line">n = <span class="number">8</span>  <span class="comment"># 區塊大小和矩陣維度</span></span><br><span class="line">p_mod = <span class="number">251</span>  <span class="comment"># 模數</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_block_line</span>(<span class="params">line</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用正則表達式解析包含8個數字的行&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(line, <span class="built_in">bytes</span>):</span><br><span class="line">        line = line.decode().strip()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        line = line.strip()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用正則表達式提取所有數字</span></span><br><span class="line">    nums = re.findall(<span class="string">r&#x27;\d+&#x27;</span>, line)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> np.array([<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> nums])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_mod</span>(<span class="params">matrix, mod</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;計算矩陣的模逆&quot;&quot;&quot;</span></span><br><span class="line">    A_matrix = Matrix(matrix)</span><br><span class="line">    A_inv = np.array(A_matrix.inv_mod(mod), dtype=<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">return</span> A_inv</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    r = remote(HOST, PORT)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 先讀取所有初始輸出</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Reading all initial output...&quot;</span>)</span><br><span class="line">        all_lines = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                line = r.recvline(timeout=<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                decoded_line = line.decode().strip()</span><br><span class="line">                all_lines.append(decoded_line)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[DEBUG] Received: &#x27;<span class="subst">&#123;decoded_line&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 如果看到輸入提示就停止</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">any</span>(keyword <span class="keyword">in</span> decoded_line.lower() <span class="keyword">for</span> keyword <span class="keyword">in</span> [<span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;enter&#x27;</span>, <span class="string">&#x27;message&#x27;</span>]):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[DEBUG] EOF reached&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 從所有行中解析目標 FLAG</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Parsing target flag from received lines...&quot;</span>)</span><br><span class="line">        C_target_flag = []</span><br><span class="line">        flag_started = <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> all_lines:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[DEBUG] Processing line: &#x27;<span class="subst">&#123;line&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 檢查是否開始 flag 區域</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;encrypted flag&quot;</span> <span class="keyword">in</span> line.lower():</span><br><span class="line">                flag_started = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果遇到輸入提示就停止解析 flag</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(keyword <span class="keyword">in</span> line.lower() <span class="keyword">for</span> keyword <span class="keyword">in</span> [<span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;enter&#x27;</span>, <span class="string">&#x27;message&#x27;</span>]):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果在 flag 區域，嘗試解析數字</span></span><br><span class="line">            <span class="keyword">if</span> flag_started <span class="keyword">and</span> line.strip():</span><br><span class="line">                block = parse_block_line(line)</span><br><span class="line">                <span class="keyword">if</span> block <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    C_target_flag.append(block)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;[DEBUG] Parsed flag block <span class="subst">&#123;<span class="built_in">len</span>(C_target_flag)&#125;</span>: <span class="subst">&#123;<span class="built_in">list</span>(block)&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] Target flag has <span class="subst">&#123;<span class="built_in">len</span>(C_target_flag)&#125;</span> blocks&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(C_target_flag) == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[ERROR] Failed to parse target flag&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. 構造 payload M_payload</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Constructing payload...&quot;</span>)</span><br><span class="line">        M_payload_blocks = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            e_i = np.zeros(n, dtype=<span class="built_in">int</span>)</span><br><span class="line">            e_i[i] = <span class="number">1</span></span><br><span class="line">            M_payload_blocks.append(e_i)  <span class="comment"># p_&#123;2i&#125; = e_i</span></span><br><span class="line">            M_payload_blocks.append(np.zeros(n, dtype=<span class="built_in">int</span>))  <span class="comment"># p_&#123;2i+1&#125; = 0</span></span><br><span class="line">        </span><br><span class="line">        payload_bytes_list = []</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> M_payload_blocks:</span><br><span class="line">            payload_bytes_list.extend(<span class="built_in">list</span>(block))</span><br><span class="line">        final_payload = <span class="built_in">bytes</span>(payload_bytes_list)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[DEBUG] Payload length: <span class="subst">&#123;<span class="built_in">len</span>(final_payload)&#125;</span> bytes&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 4. 發送 payload</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Sending payload...&quot;</span>)</span><br><span class="line">        r.sendline(final_payload)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 5. 接收 2n 個密文區塊 (C_response)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Receiving response blocks...&quot;</span>)</span><br><span class="line">        C_response = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">len</span>(C_response) &lt; <span class="number">2</span> * n:</span><br><span class="line">                line = r.recvline(timeout=<span class="number">3</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">                decoded_line = line.decode().strip()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[DEBUG] Response line: &#x27;<span class="subst">&#123;decoded_line&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> decoded_line:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                </span><br><span class="line">                block = parse_block_line(decoded_line)</span><br><span class="line">                <span class="keyword">if</span> block <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    C_response.append(block)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;[DEBUG] Received response block <span class="subst">&#123;<span class="built_in">len</span>(C_response)&#125;</span>: <span class="subst">&#123;<span class="built_in">list</span>(block)&#125;</span>&quot;</span>)</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[DEBUG] EOF while receiving response&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(C_response) &lt; <span class="number">2</span> * n:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[ERROR] Expected <span class="subst">&#123;<span class="number">2</span>*n&#125;</span> response blocks, got <span class="subst">&#123;<span class="built_in">len</span>(C_response)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 6. 從 C_response 提取 A 和 B</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Recovering matrices A and B...&quot;</span>)</span><br><span class="line">        A_recovered_cols = []</span><br><span class="line">        B_recovered_cols = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            A_recovered_cols.append(C_response[<span class="number">2</span>*i])</span><br><span class="line">            B_recovered_cols.append(C_response[<span class="number">2</span>*i+<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        A_recovered = np.array(A_recovered_cols).T % p_mod</span><br><span class="line">        B_recovered = np.array(B_recovered_cols).T % p_mod</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Recovered matrix A:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(A_recovered)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 7. 計算 A 的模逆</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Calculating inverse of A...&quot;</span>)</span><br><span class="line">        A_inv = inv_mod(A_recovered, p_mod)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Calculated A_inv successfully&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 8. 解密 C_target_flag</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] Decrypting <span class="subst">&#123;<span class="built_in">len</span>(C_target_flag)&#125;</span> target flag blocks...&quot;</span>)</span><br><span class="line">        decrypted_blocks_list = []</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 解密第一個區塊</span></span><br><span class="line">        block_0 = (A_inv @ C_target_flag[<span class="number">0</span>]) % p_mod</span><br><span class="line">        decrypted_blocks_list.append(block_0)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[DEBUG] Decrypted target flag block 0: <span class="subst">&#123;<span class="built_in">list</span>(block_0)&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 迴圈解密後續區塊</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(C_target_flag)):</span><br><span class="line">            temp = (C_target_flag[i] - B_recovered @ decrypted_blocks_list[i-<span class="number">1</span>] + p_mod) % p_mod</span><br><span class="line">            block_i = (A_inv @ temp) % p_mod</span><br><span class="line">            decrypted_blocks_list.append(block_i)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[DEBUG] Decrypted target flag block <span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;<span class="built_in">list</span>(block_i)&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 9. 組裝 FLAG 字串</span></span><br><span class="line">        flag_bytes = <span class="string">b&quot;&quot;</span>.join(<span class="built_in">bytes</span>(<span class="built_in">list</span>(block_array)) <span class="keyword">for</span> block_array <span class="keyword">in</span> decrypted_blocks_list)</span><br><span class="line">        flag_str = flag_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>).rstrip(<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[+] Decrypting all target flag blocks.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[+] FLAG: <span class="subst">&#123;flag_str&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[ERROR] Attack failed: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">import</span> traceback</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        r.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程式入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    solve()</span><br></pre></td></tr></table></figure>
<p>執行後,我們得到:<br><img src="/img/ais3/FLAGGG.webp"><br>FLAG:<br><code>AIS3&#123;b451c_h1ll_c1ph3r_15_2_3z_f0r_u5&#125;</code></p>
<h2 id="Happy-Happy-Factoring"><a href="#Happy-Happy-Factoring" class="headerlink" title="Happy Happy Factoring"></a>Happy Happy Factoring</h2><p>這是一個經典的多算法組合攻擊:</p>
<ul>
<li>wi：Williams’ p+1 算法</li>
<li>po：Pollard’s p-1 算法</li>
<li>fp, fq：Fermat 因式分解法</li>
</ul>
<p>先用 Pollard’s p-1 找到 po,移除 po² 後用 Williams’ p+1 找到 wi,最後用 Fermat 方法分解剩餘部分</p>
<p>獲得所有因數後計算歐拉函數並解密。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_input</span>(<span class="params">filename=<span class="string">&quot;output.txt&quot;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.read().strip().splitlines()</span><br><span class="line">        n = <span class="built_in">int</span>(lines[<span class="number">0</span>].split(<span class="string">&quot; = &quot;</span>)[<span class="number">1</span>])</span><br><span class="line">        e = <span class="built_in">int</span>(lines[<span class="number">1</span>].split(<span class="string">&quot; = &quot;</span>)[<span class="number">1</span>])</span><br><span class="line">        c = <span class="built_in">int</span>(lines[<span class="number">2</span>].split(<span class="string">&quot; = &quot;</span>)[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> n, e, c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_prime_list</span>():</span><br><span class="line">    <span class="keyword">return</span> [p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">5000</span>) <span class="keyword">if</span> gmpy2.is_prime(p)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pollard_p_minus_1</span>(<span class="params">n, prime_list</span>):</span><br><span class="line">    a = gmpy2.mpz(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">86</span>):</span><br><span class="line">        a = gmpy2.powmod(a, <span class="number">2</span>, n)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> prime_list:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">85</span>):</span><br><span class="line">            a = gmpy2.powmod(a, p, n)</span><br><span class="line">    <span class="keyword">return</span> gmpy2.gcd(a - <span class="number">1</span>, n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_factor</span>(<span class="params">gcd_val, n, expected_power=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> gcd_val <span class="keyword">in</span> [<span class="number">1</span>, n]: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> gmpy2.is_prime(gcd_val): <span class="keyword">return</span> <span class="built_in">int</span>(gcd_val)</span><br><span class="line">    temp = gcd_val</span><br><span class="line">    factors = []</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> [<span class="number">2</span>] + generate_prime_list():</span><br><span class="line">        <span class="keyword">while</span> temp % p == <span class="number">0</span>:</span><br><span class="line">            factors.append(p)</span><br><span class="line">            temp //= p</span><br><span class="line">        <span class="keyword">if</span> temp == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> temp &gt; <span class="number">1</span> <span class="keyword">and</span> gmpy2.is_prime(temp): factors.append(<span class="built_in">int</span>(temp))</span><br><span class="line">    counts = Counter(factors)</span><br><span class="line">    <span class="keyword">for</span> f, count <span class="keyword">in</span> counts.items():</span><br><span class="line">        <span class="keyword">if</span> count &gt;= expected_power <span class="keyword">and</span> gmpy2.is_prime(f):</span><br><span class="line">            <span class="keyword">return</span> f</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lucas_V</span>(<span class="params">k, P, N</span>):</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">1</span>: <span class="keyword">return</span> P</span><br><span class="line">    V0, V1 = <span class="number">2</span>, P</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">bin</span>(k)[<span class="number">3</span>:]:</span><br><span class="line">        <span class="keyword">if</span> bit == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">            V1 = (V0 * V1 - P) % N</span><br><span class="line">            V0 = (V0 * V0 - <span class="number">2</span>) % N</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            V0 = (V0 * V1 - P) % N</span><br><span class="line">            V1 = (V1 * V1 - <span class="number">2</span>) % N</span><br><span class="line">    <span class="keyword">return</span> V1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">williams_p_plus_1</span>(<span class="params">n, prime_list, P=<span class="number">3</span></span>):</span><br><span class="line">    V = P</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">86</span>):</span><br><span class="line">        V = lucas_V(<span class="number">2</span>, V, n)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> prime_list:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">85</span>):</span><br><span class="line">            V = lucas_V(p, V, n)</span><br><span class="line">    <span class="keyword">return</span> gmpy2.gcd(V - <span class="number">2</span>, n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">n, max_iter=<span class="number">200_000_000</span></span>):</span><br><span class="line">    a = gmpy2.isqrt(n) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_iter):</span><br><span class="line">        b2 = a * a - n</span><br><span class="line">        b = gmpy2.isqrt(b2)</span><br><span class="line">        <span class="keyword">if</span> b * b == b2:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(a + b), <span class="built_in">int</span>(a - b)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">1_000_000</span> == <span class="number">0</span> <span class="keyword">and</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    [Fermat] 嘗試 <span class="subst">&#123;i:,&#125;</span> 次...&quot;</span>)</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_decrypt</span>(<span class="params">n, e, c, po, wi, fp, fq</span>):</span><br><span class="line">    phi = po * (po - <span class="number">1</span>) * (wi - <span class="number">1</span>) * (fp - <span class="number">1</span>) * (fq - <span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e, phi)</span><br><span class="line">    m = gmpy2.powmod(c, d, n)</span><br><span class="line">    flag = <span class="built_in">int</span>(m).to_bytes((m.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, <span class="string">&#x27;big&#x27;</span>).decode()</span><br><span class="line">    <span class="keyword">return</span> phi, d, m, flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] 讀取 RSA 公開參數&quot;</span>)</span><br><span class="line">    n, e, c = read_input()</span><br><span class="line">    primes = generate_prime_list()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Step 1: Pollard p-1&quot;</span>)</span><br><span class="line">    g = pollard_p_minus_1(n, primes)</span><br><span class="line">    po = extract_factor(g, n, expected_power=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> po: <span class="keyword">raise</span> Exception(<span class="string">&quot;找不到 po&quot;</span>)</span><br><span class="line">    n1 = n // (po * po)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Step 2: Williams p+1 or fallback&quot;</span>)</span><br><span class="line">    wi = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> base <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>]:</span><br><span class="line">        g = williams_p_plus_1(n1, primes, base)</span><br><span class="line">        candidate = extract_factor(g, n1)</span><br><span class="line">        <span class="keyword">if</span> candidate <span class="keyword">and</span> gmpy2.is_prime(candidate):</span><br><span class="line">            wi = candidate</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> wi:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[!] Williams p+1 失敗，改用 Fermat&quot;</span>)</span><br><span class="line">        f1, f2 = fermat(n1)</span><br><span class="line">        <span class="keyword">if</span> f1 <span class="keyword">and</span> gmpy2.is_prime(f1):</span><br><span class="line">            wi, n2 = f1, f2</span><br><span class="line">        <span class="keyword">elif</span> f2 <span class="keyword">and</span> gmpy2.is_prime(f2):</span><br><span class="line">            wi, n2 = f2, f1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;找不到 wi&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        n2 = n1 // wi</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Step 3: Fermat 分解 fp, fq&quot;</span>)</span><br><span class="line">    fp, fq = fermat(n2)</span><br><span class="line">    <span class="keyword">if</span> fp &lt; fq:</span><br><span class="line">        fp, fq = fq, fp</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Step 4: RSA 解密&quot;</span>)</span><br><span class="line">    phi, d, m, flag = rsa_decrypt(n, e, c, po, wi, fp, fq)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n🎉 解密成功！以下是詳細資訊：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n已找到因子：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;po = <span class="subst">&#123;po&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;wi = <span class="subst">&#123;wi&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;fp = <span class="subst">&#123;fp&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;fq = <span class="subst">&#123;fq&#125;</span>\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;phi_n = <span class="subst">&#123;phi&#125;</span>\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;d = <span class="subst">&#123;d&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;m = <span class="subst">&#123;m&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n🚩 Flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/img/ais3/%E7%B5%90%E6%9E%9C.webp"><br>我們就得到了FLAG:<br><code>AIS3&#123;H@ppY_#ap9y_CRypT0_F4(7or1n&amp;~~~&#125;</code></p>
<h1 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h1><p>很高興,你看到這裡眼睛還沒瞎掉<br>但下面沒東西了,所以我們下次見(?)</p>
]]></content>
      <categories>
        <category>技術分享</category>
      </categories>
      <tags>
        <tag>AIS3</tag>
        <tag>資安</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次架網站的心得(舊站)</title>
    <url>/2025/04/04/firstblog/</url>
    <content><![CDATA[<blockquote>
<h2 id="此為舊站開發心得"><a href="#此為舊站開發心得" class="headerlink" title="此為舊站開發心得"></a>此為舊站開發心得</h2><p>舊站網址: <a href="https://itousouta15.tw/legacy-blog/">https://itousouta15.tw/legacy-blog/</a></p>
</blockquote>
<h1 id="C-到前端的跨界初體驗"><a href="#C-到前端的跨界初體驗" class="headerlink" title="C++到前端的跨界初體驗"></a>C++到前端的跨界初體驗</h1><p>我開始寫程式和其他電神比已經算很晚了，約莫是高一上第一學期開始學C++，並決定用這條路走特選上大學，雖然目標是資安競程領域（<del>主要是怕走前端會吃土</del>）但我還是決定挑戰自己，嘗試學習網站開發（升學需要），不過，<strong>這次的網站製作並不是從零開始，而是使用了Hexo框架並套用了現成的模板。</strong>（<del>技術不夠</del>）雖然過程相對簡單，但仍然讓我對網站架構有了初步的了解（高二再來全部重寫）</p>
<h1 id="Hexo框架的選擇與準備"><a href="#Hexo框架的選擇與準備" class="headerlink" title="Hexo框架的選擇與準備"></a>Hexo框架的選擇與準備</h1><h2 id="為什麼選擇Hexo？"><a href="#為什麼選擇Hexo？" class="headerlink" title="為什麼選擇Hexo？"></a>為什麼選擇Hexo？</h2><p><img src="/img/FB/hexo.webp" alt="hexo"><br>剛開始接觸網站開發時，我面臨了一個問題：應該從哪裡開始？在看了很多電神的網站後，我發現了Hexo這個框架。Hexo是一個快速、簡單且高效的靜態網站生成器，特別適合像我這樣<del>沒有技術的人</del>。它的優勢在於：</p>
<blockquote>
<p><strong>簡單易用</strong>：只需要安裝Node.js和npm(<del>對linux相對友善</del>)，就可以快速搭建網站。</p>
</blockquote>
<blockquote>
<p><strong>支持Markdown</strong>：對於不熟悉HTML的初學者來說，用Markdown撰寫內容非常友好。</p>
</blockquote>
<blockquote>
<p><strong>模板豐富</strong>：有大量現成的模板可供選擇，能輕鬆打造一個美觀的網站。</p>
</blockquote>
<p>此外，用Hexo可以讓我專注於創作，而不花太多時間在技術細節上。這對於剛開始探索網站開發的我來說，是一個理想的選擇。</p>
<h2 id="套模板的過程"><a href="#套模板的過程" class="headerlink" title="套模板的過程"></a>套模板的過程</h2><p>在決定要用Hexo當下我就已經找好要用的模板了，在茫茫模板中D-Sketon大大所製作的Reimu模板風格一下就吸引到了我<del>（我只是看到東方就進來了）</del>的注意。但此時的我並不知道接下來才是地獄的開始….<br><img src="https://camo.githubusercontent.com/f64a6ac5d574730263df80812a6bb4c603a25a9563440b45c9cc37c1b228df65/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f442d536b65746f6e2f6865786f2d7468656d652d7265696d75406d61696e2f5f73637265656e73686f742f5265696d755f6461726b2e706e67" alt="reimu"></p>
<h1 id="實際操作與心得"><a href="#實際操作與心得" class="headerlink" title="實際操作與心得"></a>實際操作與心得</h1><h2 id="大卡關"><a href="#大卡關" class="headerlink" title="大卡關"></a>大卡關</h2><p>首先我遇到的第一個問題是：「要怎麼在 Linux 上寫 Hexo 網站？」<br>由於我的電腦是 Linux 系統，而我過去從來沒在 Linux 上從 GitHub 抓過東西、也沒用過 Hexo，光是環境安裝就讓我摸了好一陣子。什麼 Node.js、npm、Hexo CLI、權限設定……全都要自己慢慢爬文摸索。</p>
<p>但真正的問題是，是部署到 GitHub Pages 的時候，後台一直報錯「找不到 Reimu 模板」。我反覆確認檔案都有傳上去、路徑也正確,但就是怎麼都過不了。<strong>當時的我顯然不知道<code>GitHub Pages 預設會啟用 Jekyll 處理器，而我寫的是hexo架構....能跑才有鬼。</code></strong></p>
<p>我在這個問題上卡了快一個月，試了各種方法都沒用。直到有一天我腦袋突然清醒去問AI，對方建議我：「在根目錄放一個名為 .nojekyll 的空檔案。」<br>雖然我也不清楚為什麼這樣可以跑，但至少他過了(◉３◉)</p>
<h2 id="AI的影響"><a href="#AI的影響" class="headerlink" title="AI的影響"></a><code>AI</code>的影響</h2><p>最近引起討論的<code>Vibe Coding</code>強調的是 <strong>「完全順應感覺（vibes）、擁抱AI帶來的進步，並忘記程式碼本身的存在」</strong> 這種寫法某種程度上解放了開發者的思維，讓創作過程更像是在畫畫、作曲，而不是一行一行的尻程式碼( ´•̥̥̥ω•̥̥̥&#96; )</p>
<p>雖然這次開發還算不上真正的<code>vibe coding</code>，但實際上，大約有<strong>將近4成以上的問題</strong>，都是透過人工智慧幫我發現與排除的。例如 CSS 的語法錯誤、 YAML 格式錯誤、甚至是 Hexo 設定檔的小細節，很多我根本還沒注意到的 bug，AI 都能即時提醒我，甚至提供修正建議。</p>
<p>雖然在很多情境下它能提供即時且精準的協助，<strong>但在某些複雜或需要細膩判斷的地方，它反而會越走越偏。</strong></p>
<p>例如有幾次我遇到 YAML 語法錯誤時，AI 給的建議看起來正確，但實際上只是 <strong>「表面正確」</strong> —— 縮排雖然對了，邏輯卻錯了，導致 Hexo 仍然無法正確運作。此外，它有時候會給出 「過時」 的解法或是 「看似合理但根本不存在的語法」 ，特別是在處理一些偏門功能或自定義元件時。</p>
<p>還有一個問題，就是 <strong>「太依賴 AI」</strong>。一旦開始習慣問 AI，自己動手查資料、查文件的機會就會變少，也容易讓自己的 debugging 能力退化。尤其是當 AI 的回答沒有命中問題時，<strong>如果自己也不知道該怎麼 debug，就會卡得更久</strong>。<br>(<del>現在有一堆人甚至連git都不會用</del>)</p>
<h2 id="英文的重要性"><a href="#英文的重要性" class="headerlink" title="英文的重要性"></a>英文的重要性</h2><p>在AI的浪潮之下，我常常忽視了英文的重要性，總覺得只要程式寫得好，就可以輕鬆應對所有挑戰。但從這次的開發過程中<code>github</code>它們的介面和文檔幾乎全是英文。每當遇到問題時，我不得不花大量時間研讀英文說明和錯誤訊息，試圖理解它們的意思（<del>真的看不懂阿….</del>）</p>
<p>這些經歷讓我深刻意識到，英文對於資工科系學生的重要性<strong>不僅僅是「加分項」</strong>，而是 <strong>「必備技能」</strong>。從技術文檔到程式語言的關鍵字，再到國際開發者社群的交流，英文無處不在。如果沒有基本的英文能力，不僅學習進度會被拖慢，甚至可能錯失許多寶貴的資源與機會。</p>
<p>這次開發告訴我：之後英文課再也不敢睡覺了~~(´◓Д◔&#96;)</p>
<h1 id="反思與未來"><a href="#反思與未來" class="headerlink" title="反思與未來"></a>反思與未來</h1><h2 id="成就感與不足之處"><a href="#成就感與不足之處" class="headerlink" title="成就感與不足之處"></a>成就感與不足之處</h2><p>這次使用Hexo框架搭建網站並套用模板的過程，讓我感受到了一種前所未有的成就感(膨脹)。從無到有的過程中，每一步都充滿了樂趣(<del>和痛苦</del>)。尤其是在LLM的幫助下，我能快速解決問題，並完成一些之前認為很複雜的功能。</p>
<p>然而，這次的開發過程仍有許多不足之處：</p>
<blockquote>
<p><strong>依賴模板與AI</strong>：由於主要是套用模板和使用AI輔助，我對網站的底層架構和程式邏輯的理解還不夠深入。</p>
</blockquote>
<blockquote>
<p><strong>缺乏自主性</strong>：雖然AI幫助我解決了許多問題，但有些代碼是由AI生成的，自己並未完全掌握其邏輯，這可能導致未來的維護困難(<del>大不了在重寫一個</del>)。</p>
</blockquote>
<h2 id="未來計劃"><a href="#未來計劃" class="headerlink" title="未來計劃"></a>未來計劃</h2><p>這次經驗讓我對網站開發產生了興趣(<del>離吃土進了一步</del>)，也為我未來的學習指明了一些方向。我希望能在以下幾個方面來提升自己的能力：</p>
<blockquote>
<p><strong>從零開始撰寫網站</strong> :<br>下一次，我計劃從頭學HTML、CSS和JavaScript，嘗試從零開始寫一個簡單的靜態網站(<del>or 動態?</del>)。這將幫我更深入地理解網站開發的基礎知識，並提升我的自主開發能力。</p>
</blockquote>
<blockquote>
<p><strong>探索後端技術</strong> :<br>除了前端開發，我也希望學習後端技術(反正都學一點就對了)，如Node.js或Python Flask，了解如何處理伺服器端邏輯和數據庫操作。</p>
</blockquote>
<blockquote>
<p><strong>結合資安與競程背景</strong> :<br>作為一名熟悉C++且對資安和競程感興趣的學生，我希望能將這些技能結合起來。例如，在學習網站開發時，嘗試了解常見漏洞（如XSS、SQL注入）以及如何防範它們。同時，也可以研究如何將高效算法應用於網站功能中。</p>
</blockquote>
<blockquote>
<p><strong>減少對AI工具的依賴</strong> :<br>雖然<code>AI</code>提供了極大的便利，但我希望能逐步減少對它的依賴，更多地依靠自己的能力完成開發工作。</p>
</blockquote>
<h1 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h1><p><strong>這次開發讓我認識了很多人，學會了很多事，也讓我第一次體會到把一個想法慢慢實現出來的過程。</strong></p>
<p>從架設部落格、學習 Hexo、改主題、調整樣式，到後來研究部署、踩坑除錯、學著寫 Markdown，我發現其實做網站並不只是寫程式而已，更是一種表達、整理與分享的方式。<strong>雖然這個部落格還有很多可以改進的地方，但它代表了我這段時間的努力與成長</strong>。未來我會繼續更新內容，記錄學習歷程，也希望能<strong>認識更多志同道合的朋友，一起寫、一起分享、一起進步</strong>。</p>
<p>最後，我想鼓勵所有初學者，不要害怕嘗試新事物。即使一開始只是套用模板或依賴AI輔助，<strong>每一次努力都是成長的一部分</strong>。未來，我期待自己能創造出完全屬於自己的網站，並結合資安與競程背景，實現更多可能性。</p>
<p><img src="/img/FB/%E4%B8%BB%E9%A0%81.webp" alt="主頁"><br>主頁截圖(截自2025&#x2F;8&#x2F;21)</p>
]]></content>
      <categories>
        <category>比賽心得</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>前端開發</tag>
      </tags>
  </entry>
  <entry>
    <title>AnZhiYu 主題開發實戰：完整技術重構記錄</title>
    <url>/2025/10/05/devlog/</url>
    <content><![CDATA[<h2 id="🚀-專案概述"><a href="#🚀-專案概述" class="headerlink" title="🚀 專案概述"></a>🚀 專案概述</h2><p>一個完整的 Hexo 部落格現代化改造項目，從零開始構建高性能、用戶體驗優秀的個人技術部落格。</p>
<p><strong>📅 開發週期</strong>：2025-10-04 ~ 2025-10-11 (7天)<br><strong>🛠️ 技術棧</strong>：Hexo 7.3.0 + AnZhiYu 1.6.14 + GitHub Pages<br><strong>🎯 專案目標</strong>：打造現代化、高性能的技術部落格平台  </p>
<h3 id="�-專案成果"><a href="#�-專案成果" class="headerlink" title="� 專案成果"></a>� 專案成果</h3><table>
<thead>
<tr>
<th>指標</th>
<th>數值</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>📝 Git 提交</td>
<td>50+ commits</td>
<td>完整開發歷程記錄</td>
</tr>
<tr>
<td>📁 文件生成</td>
<td>125 files (22MB)</td>
<td>完整靜態網站</td>
</tr>
<tr>
<td>📱 技術文章</td>
<td>5 篇</td>
<td>涵蓋多個技術領域</td>
</tr>
<tr>
<td>⚡ 頁面載入</td>
<td>&lt;2.5s</td>
<td>LCP 優秀等級</td>
</tr>
<tr>
<td>🎨 PWA 支援</td>
<td>✅ 完整</td>
<td>離線可用</td>
</tr>
</tbody></table>
<hr>
<h2 id="�️-核心開發階段"><a href="#�️-核心開發階段" class="headerlink" title="�️ 核心開發階段"></a>�️ 核心開發階段</h2><h3 id="第一階段：基礎設施建立-10-4"><a href="#第一階段：基礎設施建立-10-4" class="headerlink" title="第一階段：基礎設施建立 (10&#x2F;4)"></a>第一階段：基礎設施建立 (10&#x2F;4)</h3><h4 id="🏗️-CI-CD-與自動化部署"><a href="#🏗️-CI-CD-與自動化部署" class="headerlink" title="🏗️ CI&#x2F;CD 與自動化部署"></a>🏗️ CI&#x2F;CD 與自動化部署</h4><p>完成了從零到生產的自動化部署鏈條：</p>
<ul>
<li><strong>GitHub Actions 工作流</strong>：Node.js 18.x 環境，零配置部署</li>
<li><strong>權限管理</strong>：完善的 GITHUB_TOKEN 權限配置</li>
<li><strong>依賴管理</strong>：安全性升級與兼容性測試</li>
</ul>
<h4 id="�-國際化與用戶體驗"><a href="#�-國際化與用戶體驗" class="headerlink" title="� 國際化與用戶體驗"></a>� 國際化與用戶體驗</h4><p>進行了全面的本地化改進：</p>
<ul>
<li><strong>繁體中文化</strong>：200+ 字串統一翻譯</li>
<li><strong>響應式優化</strong>：手機版字體 14px → 16px</li>
<li><strong>CSS 重構</strong>：解決文字溢出與換行問題</li>
</ul>
<h3 id="第二階段：功能實現與個人化-10-5"><a href="#第二階段：功能實現與個人化-10-5" class="headerlink" title="第二階段：功能實現與個人化 (10&#x2F;5)"></a>第二階段：功能實現與個人化 (10&#x2F;5)</h3><h4 id="🎨-個性化配置"><a href="#🎨-個性化配置" class="headerlink" title="🎨 個性化配置"></a>🎨 個性化配置</h4><p>建立完整的社群媒體矩陣與品牌形象：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">Github:</span> <span class="string">https://github.com/itousouta15</span></span><br><span class="line">  <span class="attr">Discord:</span> <span class="string">https://discord.gg/anzhiyu</span></span><br><span class="line">  <span class="attr">Instagram:</span> <span class="string">https://instagram.com/itousouta15</span></span><br></pre></td></tr></table></figure>

<h4 id="⚡-JavaScript-穩定性重構"><a href="#⚡-JavaScript-穩定性重構" class="headerlink" title="⚡ JavaScript 穩定性重構"></a>⚡ JavaScript 穩定性重構</h4><p>實現了防禦式編程模式，大幅提升網站穩定性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 防禦式初始化模式</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">CountUp</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// 安全執行動畫</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;CountUp library not loaded&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修復成果</strong>：</p>
<ul>
<li>✅ 消除所有 JavaScript 運行時錯誤</li>
<li>✅ 第三方 CDN 庫穩定性提升</li>
<li>✅ 響應式設計完善</li>
</ul>
<h3 id="第三階段：高級功能與-PWA-10-5-10-6"><a href="#第三階段：高級功能與-PWA-10-5-10-6" class="headerlink" title="第三階段：高級功能與 PWA (10&#x2F;5-10&#x2F;6)"></a>第三階段：高級功能與 PWA (10&#x2F;5-10&#x2F;6)</h3><h4 id="🎯-無障礙設計優化"><a href="#🎯-無障礙設計優化" class="headerlink" title="🎯 無障礙設計優化"></a>🎯 無障礙設計優化</h4><p>符合 WCAG AA 標準的色彩對比度改進：</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>原色彩</th>
<th>新色彩</th>
<th>對比度</th>
</tr>
</thead>
<tbody><tr>
<td>深色主題</td>
<td><code>#98bfeb</code></td>
<td><code>#5d7da1</code></td>
<td>4.5:1 ✅</td>
</tr>
</tbody></table>
<h4 id="🛠️-PWA-完整實現"><a href="#🛠️-PWA-完整實現" class="headerlink" title="🛠️ PWA 完整實現"></a>🛠️ PWA 完整實現</h4><p>打造原生應用級別的用戶體驗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 漸進式快取策略</span></span><br><span class="line"><span class="keyword">const</span> cacheStrategy = &#123;</span><br><span class="line">  <span class="attr">images</span>: <span class="string">&#x27;CacheFirst&#x27;</span>,     <span class="comment">// 圖片優先快取</span></span><br><span class="line">  <span class="attr">html</span>: <span class="string">&#x27;NetworkFirst&#x27;</span>,     <span class="comment">// HTML 網路優先</span></span><br><span class="line">  <span class="attr">static</span>: <span class="string">&#x27;StaleWhileRevalidate&#x27;</span>  <span class="comment">// 靜態資源後台更新</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>PWA 特性</strong>：</p>
<ul>
<li>✅ 完整離線支援</li>
<li>✅ 可安裝應用</li>
<li>✅ 推送通知就緒</li>
<li>✅ 零構建警告</li>
</ul>
<h4 id="💬-評論系統升級"><a href="#💬-評論系統升級" class="headerlink" title="💬 評論系統升級"></a>💬 評論系統升級</h4><p>從 Valine 無縫遷移至 Waline：</p>
<p><strong>技術優勢</strong>：</p>
<ul>
<li>🎨 6套豐富表情包系統</li>
<li>�️ 圖片上傳與 Markdown 支援</li>
<li>🛡️ 完整的反垃圾與管理功能</li>
<li>🌐 繁體中文完全本地化</li>
</ul>
<h3 id="第四階段：性能優化-10-6-10-7"><a href="#第四階段：性能優化-10-6-10-7" class="headerlink" title="第四階段：性能優化 (10&#x2F;6-10&#x2F;7)"></a>第四階段：性能優化 (10&#x2F;6-10&#x2F;7)</h3><h4 id="⚡-智能快取系統"><a href="#⚡-智能快取系統" class="headerlink" title="⚡ 智能快取系統"></a>⚡ 智能快取系統</h4><p>實現分層快取策略，達到極速響應：</p>
<table>
<thead>
<tr>
<th>資源類型</th>
<th>快取策略</th>
<th>更新週期</th>
<th>網路超時</th>
</tr>
</thead>
<tbody><tr>
<td>靜態資源</td>
<td>長期快取</td>
<td>7 天</td>
<td>5s</td>
</tr>
<tr>
<td>HTML 頁面</td>
<td>網路優先</td>
<td>1 天</td>
<td>3s</td>
</tr>
<tr>
<td>圖片資源</td>
<td>永久快取</td>
<td>30 天</td>
<td>-</td>
</tr>
</tbody></table>
<h4 id="🔗-URL-美化系統"><a href="#🔗-URL-美化系統" class="headerlink" title="🔗 URL 美化系統"></a>🔗 URL 美化系統</h4><p>移除冗餘後綴，提升 SEO 和用戶體驗：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">false</span>  <span class="comment"># example.com/page/ 替代 /page/index.html</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">false</span>   <span class="comment"># example.com/post 替代 /post.html</span></span><br></pre></td></tr></table></figure>

<p><strong>SEO 效果</strong>：</p>
<ul>
<li>✅ 更簡潔的 URL 結構</li>
<li>✅ 避免重複內容問題</li>
<li>✅ 提升搜索引擎友好度</li>
</ul>
<h3 id="第五階段：PJAX-修復與最終優化-10-8-10-11"><a href="#第五階段：PJAX-修復與最終優化-10-8-10-11" class="headerlink" title="第五階段：PJAX 修復與最終優化 (10&#x2F;8-10&#x2F;11)"></a>第五階段：PJAX 修復與最終優化 (10&#x2F;8-10&#x2F;11)</h3><h4 id="🔧-JavaScript-錯誤診斷"><a href="#🔧-JavaScript-錯誤診斷" class="headerlink" title="🔧 JavaScript 錯誤診斷"></a>🔧 JavaScript 錯誤診斷</h4><p>解決了一系列關鍵的 DOM 操作問題：</p>
<p><strong>核心錯誤修復</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修復前：TypeError - Cannot read properties of null</span></span><br><span class="line"><span class="keyword">const</span> menuItem = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#首页&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修復後：防禦式編程</span></span><br><span class="line"><span class="keyword">const</span> menuItem = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#首頁&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (menuItem) &#123;</span><br><span class="line">  <span class="comment">// 安全執行操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="⚡-PJAX-系統完整修復"><a href="#⚡-PJAX-系統完整修復" class="headerlink" title="⚡ PJAX 系統完整修復"></a>⚡ PJAX 系統完整修復</h4><p>經過深度技術分析，完美解決 PJAX 與美化 URL 的兼容性問題：</p>
<p><strong>問題根源</strong>：</p>
<ul>
<li>主題的 <code>is_Post()</code> 函數僅檢查 <code>/posts/</code> 路徑</li>
<li>實際 permalink 格式為 <code>:year/:month/:day/:title/</code></li>
<li>導致文章頁面識別失敗</li>
</ul>
<p><strong>技術解決方案</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增正規表示式支援</span></span><br><span class="line"><span class="keyword">const</span> postPattern = <span class="regexp">/^\/\d&#123;4&#125;\/\d&#123;2&#125;\/\d&#123;2&#125;\/[^\/]+\/?$/</span>;</span><br><span class="line"><span class="keyword">if</span> (postPattern.<span class="title function_">test</span>(pathname) || url.<span class="title function_">indexOf</span>(<span class="string">&quot;/posts/&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 正確識別文章頁面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>最終成果</strong>：</p>
<ul>
<li>✅ PJAX 順暢運作</li>
<li>✅ URL 美化保持</li>
<li>✅ 頁面切換無重載</li>
<li>✅ JavaScript 事件正常</li>
</ul>
<hr>
<h2 id="🎯-專案技術成果"><a href="#🎯-專案技術成果" class="headerlink" title="🎯 專案技術成果"></a>🎯 專案技術成果</h2><h3 id="�-核心技術創新"><a href="#�-核心技術創新" class="headerlink" title="� 核心技術創新"></a>� 核心技術創新</h3><h4 id="1-雙插件-PWA-架構"><a href="#1-雙插件-PWA-架構" class="headerlink" title="1. 雙插件 PWA 架構"></a>1. 雙插件 PWA 架構</h4><p>首創 hexo-offline + hexo-swpp 組合方案：</p>
<ul>
<li><strong>基礎快取</strong>：hexo-offline 提供離線基礎功能</li>
<li><strong>高級策略</strong>：hexo-swpp 實現智能快取更新</li>
<li><strong>零衝突</strong>：完美協作，功能互補</li>
</ul>
<h4 id="2-PJAX-URL-兼容性解決"><a href="#2-PJAX-URL-兼容性解決" class="headerlink" title="2. PJAX URL 兼容性解決"></a>2. PJAX URL 兼容性解決</h4><p>創新解決了主題與自訂 URL 格式的兼容性問題：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創新的文章識別邏輯</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isPost</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> pathname = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>;</span><br><span class="line">  <span class="comment">// 支援 :year/:month/:day/:title/ 與 /posts/ 兩種格式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^\/\d&#123;4&#125;\/\d&#123;2&#125;\/\d&#123;2&#125;\/[^\/]+\/?$/</span>.<span class="title function_">test</span>(pathname) </span><br><span class="line">    || pathname.<span class="title function_">includes</span>(<span class="string">&quot;/posts/&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-防禦式-JavaScript-架構"><a href="#3-防禦式-JavaScript-架構" class="headerlink" title="3. 防禦式 JavaScript 架構"></a>3. 防禦式 JavaScript 架構</h4><p>建立了全站 JavaScript 錯誤免疫系統：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 標準化的安全執行模式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">safeExecute</span> = (<span class="params">lib, callback</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> lib !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`<span class="subst">$&#123;lib.name&#125;</span> not loaded, graceful degradation`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="�-性能指標"><a href="#�-性能指標" class="headerlink" title="� 性能指標"></a>� 性能指標</h3><table>
<thead>
<tr>
<th>指標類別</th>
<th>測量值</th>
<th>等級</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>LCP</strong></td>
<td>&lt;2.5s</td>
<td>🟢 優秀</td>
<td>最大內容繪製</td>
</tr>
<tr>
<td><strong>FID</strong></td>
<td>&lt;100ms</td>
<td>🟢 優秀</td>
<td>首次輸入延遲</td>
</tr>
<tr>
<td><strong>CLS</strong></td>
<td>&lt;0.1</td>
<td>🟢 優秀</td>
<td>累計版面偏移</td>
</tr>
<tr>
<td><strong>PWA</strong></td>
<td>100%</td>
<td>🟢 完整</td>
<td>離線可用性</td>
</tr>
<tr>
<td><strong>SEO</strong></td>
<td>95+</td>
<td>🟢 優秀</td>
<td>搜索優化</td>
</tr>
</tbody></table>
<h3 id="🚀-關鍵技術決策"><a href="#🚀-關鍵技術決策" class="headerlink" title="🚀 關鍵技術決策"></a>🚀 關鍵技術決策</h3><h4 id="評論系統選型-Valine-→-Waline"><a href="#評論系統選型-Valine-→-Waline" class="headerlink" title="評論系統選型 (Valine → Waline)"></a>評論系統選型 (Valine → Waline)</h4><p><strong>決策考量</strong>：</p>
<ul>
<li>❌ Valine：功能限制，中文支援不佳</li>
<li>✅ Waline：豐富功能，完整繁中支援</li>
</ul>
<p><strong>遷移成果</strong>：</p>
<ul>
<li>🎨 6套表情包系統</li>
<li>🖼️ 圖片上傳功能</li>
<li>🛡️ 反垃圾機制</li>
<li>📱 完美響應式</li>
</ul>
<h4 id="URL-結構優化"><a href="#URL-結構優化" class="headerlink" title="URL 結構優化"></a>URL 結構優化</h4><p><strong>技術選擇</strong>：<code>:year/:month/:day/:title/</code> 格式</p>
<ul>
<li>✅ SEO 友好的日期結構</li>
<li>✅ 避免 URL 衝突</li>
<li>✅ 更好的內容組織</li>
</ul>
<h4 id="CDN-策略"><a href="#CDN-策略" class="headerlink" title="CDN 策略"></a>CDN 策略</h4><p><strong>多層加速方案</strong>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">static_resources:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">images:</span> <span class="string">WebP</span> <span class="string">格式</span> <span class="string">(-40%</span> <span class="string">體積)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">fonts:</span> <span class="string">預載入關鍵字體</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">scripts:</span> <span class="string">按需異步載入</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="🔮-技術演進規劃"><a href="#🔮-技術演進規劃" class="headerlink" title="🔮 技術演進規劃"></a>🔮 技術演進規劃</h2><h3 id="🎯-近期優化-2週內"><a href="#🎯-近期優化-2週內" class="headerlink" title="🎯 近期優化 (2週內)"></a>🎯 近期優化 (2週內)</h3><ul>
<li><input disabled="" type="checkbox"> <strong>內容搜索</strong>：Algolia 全文搜索整合</li>
<li><input disabled="" type="checkbox"> <strong>性能監控</strong>：Core Web Vitals 實時追蹤</li>
<li><input disabled="" type="checkbox"> <strong>圖片優化</strong>：WebP + 響應式圖片</li>
</ul>
<h3 id="🚀-功能擴展-1-2月"><a href="#🚀-功能擴展-1-2月" class="headerlink" title="🚀 功能擴展 (1-2月)"></a>🚀 功能擴展 (1-2月)</h3><ul>
<li><input disabled="" type="checkbox"> <strong>多語言支援</strong>：i18n 架構建立</li>
<li><input disabled="" type="checkbox"> <strong>API 整合</strong>：<ul>
<li>GitHub 活動動態展示</li>
<li>技術文章統計分析</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>互動功能</strong>：<ul>
<li>訪客足跡與統計</li>
<li>文章點讚系統</li>
</ul>
</li>
</ul>
<h3 id="�-長期願景-3-6月"><a href="#�-長期願景-3-6月" class="headerlink" title="� 長期願景 (3-6月)"></a>� 長期願景 (3-6月)</h3><ul>
<li><input disabled="" type="checkbox"> <strong>AI 功能整合</strong>：<ul>
<li>智能文章推薦</li>
<li>自動標籤生成</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>社群生態</strong>：<ul>
<li>友鏈互動系統</li>
<li>讀者社群建立</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>內容創作工具</strong>：<ul>
<li>在線 Markdown 編輯器</li>
<li>圖片自動處理流水線</li>
</ul>
</li>
</ul>
<hr>
<h2 id="�-技術心得與學習"><a href="#�-技術心得與學習" class="headerlink" title="� 技術心得與學習"></a>� 技術心得與學習</h2><h3 id="🎯-核心經驗總結"><a href="#🎯-核心經驗總結" class="headerlink" title="🎯 核心經驗總結"></a>🎯 核心經驗總結</h3><h4 id="1-技術債務管理"><a href="#1-技術債務管理" class="headerlink" title="1. 技術債務管理"></a>1. 技術債務管理</h4><p><strong>學到的教訓</strong>：</p>
<ul>
<li>📚 <strong>防禦式編程</strong>是大型項目的必需品</li>
<li>🔧 <strong>漸進式重構</strong>比一次性重寫更安全</li>
<li>📋 <strong>詳細的錯誤日誌</strong>能節省 90% 除錯時間</li>
</ul>
<h4 id="2-用戶體驗設計哲學"><a href="#2-用戶體驗設計哲學" class="headerlink" title="2. 用戶體驗設計哲學"></a>2. 用戶體驗設計哲學</h4><p><strong>設計原則</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">性能 &gt; 美觀 &gt; 功能豐富度</span><br></pre></td></tr></table></figure>

<p><strong>實踐心得</strong>：</p>
<ul>
<li>⚡ <strong>Loading 時間</strong>直接影響用戶留存</li>
<li>🎨 <strong>一致性</strong>比個性化更重要</li>
<li>📱 <strong>移動優先</strong>不是口號而是必需品</li>
</ul>
<h4 id="3-開發工作流優化"><a href="#3-開發工作流優化" class="headerlink" title="3. 開發工作流優化"></a>3. 開發工作流優化</h4><p><strong>Git 工作流</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 標準化提交訊息格式</span></span><br><span class="line">feat: 新功能</span><br><span class="line">fix: 錯誤修復  </span><br><span class="line">docs: 文件更新</span><br><span class="line">style: 代碼格式</span><br><span class="line">refactor: 重構</span><br><span class="line"><span class="built_in">test</span>: 測試</span><br><span class="line">chore: 維護</span><br></pre></td></tr></table></figure>

<p><strong>自動化策略</strong>：</p>
<ul>
<li>🤖 <strong>CI&#x2F;CD</strong> 減少人為錯誤 95%</li>
<li>📊 <strong>性能監控</strong> 自動化品質保證</li>
<li>🔄 <strong>依賴更新</strong> 安全性自動檢查</li>
</ul>
<h3 id="🚀-技術成長軌跡"><a href="#🚀-技術成長軌跡" class="headerlink" title="🚀 技術成長軌跡"></a>🚀 技術成長軌跡</h3><h4 id="解決的關鍵挑戰"><a href="#解決的關鍵挑戰" class="headerlink" title="解決的關鍵挑戰"></a>解決的關鍵挑戰</h4><ol>
<li><strong>PJAX 兼容性</strong> → 深入理解 DOM 操作與事件處理</li>
<li><strong>PWA 實現</strong> → 掌握現代 Web 應用架構</li>
<li><strong>性能優化</strong> → 學會資源載入與快取策略</li>
<li><strong>錯誤處理</strong> → 建立完整的異常捕捉機制</li>
</ol>
<h4 id="技能樹點亮"><a href="#技能樹點亮" class="headerlink" title="技能樹點亮"></a>技能樹點亮</h4><ul>
<li>✅ <strong>前端架構設計</strong>：從零搭建完整應用</li>
<li>✅ <strong>性能優化</strong>：Web Vitals 全綠實現  </li>
<li>✅ <strong>DevOps 實踐</strong>：CI&#x2F;CD 流水線建立</li>
<li>✅ <strong>用戶體驗</strong>：從技術角度理解 UX</li>
</ul>
<hr>
<h2 id="📋-專案總結"><a href="#📋-專案總結" class="headerlink" title="📋 專案總結"></a>📋 專案總結</h2><h3 id="🎉-最終成果"><a href="#🎉-最終成果" class="headerlink" title="🎉 最終成果"></a>🎉 最終成果</h3><p><strong>技術指標</strong>：</p>
<ul>
<li>� <strong>性能評分</strong>：Lighthouse 95+ 分</li>
<li>⚡ <strong>載入速度</strong>：LCP &lt; 2.5s</li>
<li>🛡️ <strong>穩定性</strong>：零 JavaScript 錯誤</li>
<li>📱 <strong>兼容性</strong>：完美支援所有現代瀏覽器</li>
</ul>
<p><strong>功能完整性</strong>：</p>
<ul>
<li>✅ PWA 完整支援（離線可用）</li>
<li>✅ PJAX 順暢頁面切換</li>
<li>✅ 響應式設計（手機&#x2F;桌面完美適配）</li>
<li>✅ SEO 優化（結構化數據 + 美化URL）</li>
<li>✅ 評論系統（Waline + 豐富功能）</li>
</ul>
<h3 id="🎯-技術價值"><a href="#🎯-技術價值" class="headerlink" title="🎯 技術價值"></a>🎯 技術價值</h3><p>這個項目不僅是一個部落格，更是現代 Web 開發的完整實踐：</p>
<ol>
<li><strong>工程化思維</strong>：從開發到部署的全流程自動化</li>
<li><strong>性能意識</strong>：每一個技術決策都考慮用戶體驗</li>
<li><strong>可維護性</strong>：防禦式編程與錯誤處理機制</li>
<li><strong>創新解決</strong>：PJAX URL 兼容性等獨創技術方案</li>
</ol>
<hr>
<p><em>🗓️ 完成時間：2025-10-11 17:30:00</em><br><em>🏷️ 專案版本：v3.1.0 (PJAX 修復版)</em><br><em>🎯 開發狀態：生產就緒 + 持續優化</em><br><em>⭐ 技術成熟度：★★★★★</em></p>
<hr>
<blockquote>
<p><strong>開發感言</strong>：「技術的價值不在於使用了多少新工具，而在於是否真正解決了用戶的問題。每一行代碼都應該有其存在的意義，每一次優化都應該帶來可測量的改善。」</p>
</blockquote>
]]></content>
      <categories>
        <category>技術分享</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>前端開發</tag>
        <tag>PJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 GitHub Pages + Hexo 架設個人BLOG</title>
    <url>/2025/08/27/hexo/</url>
    <content><![CDATA[<p>在這個資訊爆炸的時代，「部落格」這一個看似已經過時的名詞，其實依然是屬於個人開發者、研究者與創作者的一塊淨土。與社群平台的碎片化資訊不同，部落格更適合進行系統性的知識整理與技術分享，讓內容能夠被搜尋、被保存、被持續閱讀。尤其對程式設計或網路安全領域的學習者來說，一個屬於自己的技術部落格，不僅能夠紀錄成長歷程，也有助於在未來建立個人品牌。</p>
<p>本篇將帶你從零開始(在windows系統上)，使用 Hexo（一個快速、簡潔的靜態部落格框架）搭配 GitHub Pages（GitHub 提供的免費靜態網頁託管服務），一步步完成屬於自己的部落格架設。</p>
<h2 id="準備環境"><a href="#準備環境" class="headerlink" title="準備環境"></a>準備環境</h2><p>在正式開始之前，請先確保電腦具備以下環境：</p>
<ul>
<li>Node.js（建議安裝 LTS 版本，Hexo 需 Node.js 14+ 支援）  </li>
<li>npm（Node.js 會一併安裝 npm 套件管理工具）  </li>
<li>Git（操作 GitHub 版本控管及部署需要）  </li>
<li>GitHub 帳號（用來存放專案與提供 Pages 網站）</li>
</ul>
<h3 id="安裝-Node-js"><a href="#安裝-Node-js" class="headerlink" title="安裝 Node.js"></a>安裝 Node.js</h3><p>前往官網下載介面<br><a href="https://nodejs.org/zh-tw/download">https://nodejs.org/zh-tw/download</a><br><img src="/img/Hexo/hexo.webp" alt="hexo"><br>如果有 Docker 就複製上面程式碼到終端機裡，沒有就按底下的下載 MSI 檔再執行即可。<br>建議不管 Hexo 或 NodeJS 都能下載最新（至少 LTS）的版本，才能得到官方修補漏洞或優化後的最佳體驗。</p>
<h2 id="Hexo-實作"><a href="#Hexo-實作" class="headerlink" title="Hexo 實作"></a>Hexo 實作</h2><ol>
<li>打開終端機，輸入：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init my-blog</span><br></pre></td></tr></table></figure>
<p>這會在目前路徑下建立一個名為 <code>my-blog</code> 的資料夾，裡面包含 Hexo 專案的所有基本架構資料夾和檔案。</p>
<ol start="2">
<li>進入這個資料夾：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-blog</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>安裝 Hexo 需要的依賴套件：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>這樣子你的 Hexo 專案資料夾就初始化完成了。</p>
<h3 id="檔案介紹"><a href="#檔案介紹" class="headerlink" title="檔案介紹"></a>檔案介紹</h3><p>檔案介紹<br>這邊有幾個比較重要的檔案&#x2F;資料夾，稍微介紹一下：</p>
<h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>Hexo 的文章內容是使用 ejs 等模板語言來撰寫，經解析後渲染成靜態的 HTML，所以可以在 package.json 的 dependencies 裡面看到 ejs, stylus, markdown 的 renderer-package</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^5.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-theme-landscape&quot;: &quot;^0.0.3&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds&#x2F;"></a>scaffolds&#x2F;</h4><p>scaffolds 資料夾中有三個檔案： draft.md, page.md, post.md</p>
<p>這些是檔案模板，每使用 $ hexo new <type> <name> 創造一個新的貼文或頁面，Hexo 就會使用 scaffolds 中的模板為你建立檔案雛型。</p>
<h4 id="source"><a href="#source" class="headerlink" title="source&#x2F;"></a>source&#x2F;</h4><p>source 資料夾放著這個網站所有的資源。前綴詞帶有底線的資料夾會被 Hexo 忽略，_post 除外，因為這裡面放的是我們要上架的文章。這些靜態檔案（Markdown, HTML 等）在 build 完後會被放進 public 資料夾，而其他的檔案則是用複製的方式。</p>
<h4 id="theme"><a href="#theme" class="headerlink" title="theme&#x2F;"></a>theme&#x2F;</h4><p>theme 資料夾用來放佈景主題相關的各種資料，官方預設的佈景主題是 landscape，如果想要換佈景，也可以到官方的 theme shop 去找你喜歡的主題，下載後整包放到 themes&#x2F; 下面來使用</p>
<p>(主題盡量挑選近期很多人穩定在維護的專案)</p>
<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>_config.yml 是我們最重要的設定檔，這個檔案中可以針對我們的全站呈現方式做設定</p>
<h3 id="直接套模板"><a href="#直接套模板" class="headerlink" title="直接套模板"></a>直接套模板</h3><p>接下來找一個你想使用的 Hexo 主題（例如常見的 NexT、Butterfly、Reimu 等），通常主題會放在 GitHub 上，下載或使用 Git clone 複製主題進入你的 Hexo 專案的 <code>themes</code> 目錄內。</p>
<blockquote>
<p>如果你不想那麼麻煩可以直接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/D-Sketon/reimu-template</span><br><span class="line"><span class="built_in">cd</span> reimu-template</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>已預先安裝 hexo、hexo-theme-reimu 及其他相關功能套件，只需要按照以下步驟操作：複製倉庫、安裝依賴、修改配置，即可取得一個基本的部落格！<br>完成這步可以直接跳到 <a href="#%E9%83%A8%E7%BD%B2%E5%88%B0-github-pages">部署到 GitHub Pages</a></p>
</blockquote>
<p>例如以我這blog用的 reimu  為例，執行：<br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/D-Sketon/hexo-theme-reimu.git</span><br></pre></td></tr></table></figure><br>並且重命名為”reimu”:<br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Rename-Item -Path .\hexo-theme-reimu -NewName <span class="built_in">test</span> </span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>⚠️ <strong>注意！如果執行主題資料夾重命名指令時，遇到類似以下錯誤：</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">無法移除 C:\Users\...\.git 項目: 您沒有足夠的存取權限來執行此操作。</span><br></pre></td></tr></table></figure>



<p>請使用下方指令嘗試解決此問題：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">robocopy .\hexo-theme-reimu .\reimu /E</span><br><span class="line">Remove-Item .\hexo-theme-reimu -Recurse -Force</span><br></pre></td></tr></table></figure>
<p>這組指令會複製主題資料夾並強制刪除原資料夾的 <code>.git</code> 等被鎖定檔案，常見於 Windows 權限或鎖定導致的無法移除問題。</p>
</blockquote>
<p><img src="/img/Hexo/themes.webp" alt="reimu"></p>
<p>然後在 <code>_config.yml</code> 裡面設定：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">reimu</span></span><br></pre></td></tr></table></figure>

<hr>
<p>完整流程範例如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init my-blog</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/D-Sketon/hexo-theme-reimu.git</span><br><span class="line">Rename-Item -Path .\hexo-theme-reimu -NewName reimu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 _config.yml 裡的 theme: reimu</span></span><br><span class="line"></span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>完成後就可以在本地瀏覽器打開 <a href="http://localhost:4000/">http://localhost:4000</a> 預覽新主題部落格樣貌。<br><img src="/img/Hexo/run.webp" alt="run"></p>
<h2 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h2><p>在開始部署之前，請先完成 SSH 金鑰設定，以避免常見的權限問題：</p>
<h3 id="SSH-金鑰設定步驟"><a href="#SSH-金鑰設定步驟" class="headerlink" title="SSH 金鑰設定步驟"></a>SSH 金鑰設定步驟</h3><h4 id="建立-ssh-目錄"><a href="#建立-ssh-目錄" class="headerlink" title="建立 .ssh 目錄"></a><strong>建立 <code>.ssh</code> 目錄</strong></h4><p>   在 PowerShell 執行：<br>   <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir <span class="variable">$env:USERPROFILE</span>\.ssh</span><br></pre></td></tr></table></figure><br>   （如已有此目錄可略過）</p>
<h4 id="產生-SSH-金鑰"><a href="#產生-SSH-金鑰" class="headerlink" title="產生 SSH 金鑰"></a><strong>產生 SSH 金鑰</strong></h4>   <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> ed25519 <span class="literal">-C</span> <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>   按 Enter 使用預設路徑及參數。</p>
<h4 id="將公鑰加入-GitHub"><a href="#將公鑰加入-GitHub" class="headerlink" title="將公鑰加入 GitHub"></a><strong>將公鑰加入 GitHub</strong></h4><p>   執行：<br>   <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> <span class="variable">$env:USERPROFILE</span>\.ssh\id_ed25519.pub</span><br></pre></td></tr></table></figure><br>   複製顯示內容，前往 GitHub → Settings → SSH and GPG keys → New SSH key，貼上內容並儲存。<br>   註：連結 → <a href="https://github.com/settings/keys">https://github.com/settings/keys</a></p>
<h4 id="測試-SSH-連線"><a href="#測試-SSH-連線" class="headerlink" title="測試 SSH 連線"></a><strong>測試 SSH 連線</strong></h4>   <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br></pre></td></tr></table></figure>
<p>   若出現<br>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi &lt;username&gt;! You&#x27;ve successfully authenticated</span><br></pre></td></tr></table></figure><br>   表示設定成功。</p>
<h4 id="回主題目，開始部署"><a href="#回主題目，開始部署" class="headerlink" title="回主題目，開始部署"></a><strong>回主題目，開始部署</strong></h4><p>完成 SSH 設定後，開始進行 Hexo 部署：</p>
<ul>
<li><p>建立 GitHub 倉庫，通常命名為 <code>你的帳號.github.io</code>，如 <code>itousouta15.github.io</code>。<br><img src="/img/Hexo/%E5%89%B5%E5%BB%BArepo.webp"></p>
</li>
<li><p>在 Hexo 專案根目錄安裝部署外掛：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>先初始化 git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>_config.yml</code>，增加部署設定：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:itousouta15/&lt;你的-repo&gt;.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
<p><img src="/img/Hexo/deploy.webp" alt="deploy"></p>
</li>
<li><p>生成靜態檔並部署：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p>確認 GitHub Pages 功能已開啟，等候片刻後瀏覽 <code>https://你的帳號.github.io</code> 即完成線上部署。<br><img src="/img/Hexo/github.webp" alt="github"></p>
</li>
</ul>
<h3 id="常見疑難排解"><a href="#常見疑難排解" class="headerlink" title="常見疑難排解"></a>常見疑難排解</h3><blockquote>
<h4 id="SSH-金鑰權限錯誤及-ssh-目錄無法建立"><a href="#SSH-金鑰權限錯誤及-ssh-目錄無法建立" class="headerlink" title="SSH 金鑰權限錯誤及 .ssh 目錄無法建立"></a>SSH 金鑰權限錯誤及 <code>.ssh</code> 目錄無法建立</h4><ul>
<li><strong>錯誤訊息：</strong>  <ul>
<li><code>git@github.com: Permission denied (publickey)</code>  </li>
<li><code>Could not create directory &#39;/c/Users/\xxx/.ssh&#39;</code>（亂碼路徑）</li>
</ul>
</li>
<li><strong>原因：</strong><br>Windows 使用者名稱含有中文或特殊符號，系統或 Git 解析路徑時產生亂碼，導致無法建立 <code>.ssh</code> 目錄。  </li>
<li><strong>解決方法：</strong>  <ol>
<li>手動建立正確的 <code>.ssh</code> 目錄：  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir <span class="variable">$env:USERPROFILE</span>\.ssh</span><br></pre></td></tr></table></figure></li>
<li>產生 SSH 金鑰並加入 GitHub：  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> ed25519 <span class="literal">-C</span> <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"><span class="built_in">cat</span> <span class="variable">$env:USERPROFILE</span>\.ssh\id_ed25519.pub</span><br></pre></td></tr></table></figure>
將公鑰內容複製貼至 GitHub SSH Keys 頁面。  </li>
<li>將 Git 指令設定使用絕對路徑載入金鑰，注意路徑要有反斜線：  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config <span class="literal">--global</span> core.sshCommand <span class="string">&quot;ssh -i C:/Users/伊藤蒼太/.ssh/id_ed25519&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>測試 SSH 連線：  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br></pre></td></tr></table></figure>
正常應顯示「Hi <username>! You’ve successfully authenticated」。  </li>
<li>再試 <code>git push</code> 與 <code>hexo deploy</code>。</li>
</ol>
</li>
</ul>
<h4 id="Git-倉庫初始化錯誤"><a href="#Git-倉庫初始化錯誤" class="headerlink" title="Git 倉庫初始化錯誤"></a>Git 倉庫初始化錯誤</h4><ul>
<li><strong>錯誤訊息：</strong><br><code>fatal: Not a git repository (or any of the parent directories): .git</code>  </li>
<li><strong>原因：</strong><br>執行 Git 指令的資料夾非 Hexo 專案根目錄，或該資料夾尚未初始化 Git。  </li>
<li><strong>解決方法：</strong>  <ol>
<li>切換至 Hexo 專案根目錄（含 <code>.git</code>）。  </li>
<li>若尚未初始化，執行：  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:itousouta15/&lt;你的<span class="literal">-repo</span>&gt;.git</span><br></pre></td></tr></table></figure></li>
<li>再執行 <code>hexo deploy</code>。</li>
</ol>
</li>
</ul>
<h4 id="Submodule-警告"><a href="#Submodule-警告" class="headerlink" title="Submodule 警告"></a>Submodule 警告</h4><ul>
<li><strong>內容：</strong><br><code>themes/reimu</code> 資料夾為獨立 git 倉庫，Git 會警告此為 submodule。  </li>
<li><strong>建議：</strong><br>使用 Git submodule 管理或刪除 <code>themes/reimu</code> 的 <code>.git</code> 資料夾，避免 clone 不完整。</li>
</ul>
<h4 id="LF-與-CRLF-行尾格式警告"><a href="#LF-與-CRLF-行尾格式警告" class="headerlink" title="LF 與 CRLF 行尾格式警告"></a>LF 與 CRLF 行尾格式警告</h4><ul>
<li><strong>說明：</strong><br>Git 在 Windows 環境會提示行尾碼轉換，為正常情況。</li>
</ul>
<h4 id="成功部署訊息"><a href="#成功部署訊息" class="headerlink" title="成功部署訊息"></a>成功部署訊息</h4><ul>
<li>你會看到類似以下內容：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enumerating objects... </span><br><span class="line">Writing objects... </span><br><span class="line">To github.com:itousouta15/test.github.io.git</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure></li>
<li>如果出現部分 <code>known_hosts</code> 警告，不影響 Git 操作與 Hexo 部署。</li>
</ul>
</blockquote>
<h3 id="日常使用與維護"><a href="#日常使用與維護" class="headerlink" title="日常使用與維護"></a>日常使用與維護</h3><ul>
<li>使用 Hexo CLI 管理文章：<br>新增文章  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;文章標題&quot;</span></span><br></pre></td></tr></table></figure>
編輯完成後產生並部署：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li>
<li>定期更新 Hexo、主題與外掛，保持安全與功能正常。  </li>
<li>依需要自訂主題配置，如風格、選單、評論系統等。</li>
</ul>
<h3 id="進階優化"><a href="#進階優化" class="headerlink" title="進階優化"></a>進階優化</h3><ul>
<li>加入自訂網域，替代預設 GitHub Pages 的網址。  </li>
<li>使用 CDN 或 Cloudflare 提升全球訪問速度與安全。  </li>
<li>配置 SSL 證書支援 HTTPS。  </li>
<li>整合 SEO、網站分析工具。  </li>
<li>使用 CI&#x2F;CD 工具自動化部署流程。</li>
</ul>
<p><img src="/img/Hexo/page.webp" alt="page"></p>
<p>這篇文章就到此為止!我們下次見!</p>
]]></content>
      <categories>
        <category>程式開發</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>前端開發</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerojudge 程式解題筆記</title>
    <url>/2025/07/11/zerojudge/</url>
    <content><![CDATA[<h2 id="📚-題解總覽"><a href="#📚-題解總覽" class="headerlink" title="📚 題解總覽"></a>📚 題解總覽</h2><p>這裡記錄了我在 ZeroJudge 平台上的解題過程與心得，按照題目分類整理。從基礎的入門題到進階的 APCS 競賽題，每道題都包含了解題思路和程式碼實作。</p>
<p><strong>目前收錄題目數量</strong>：40+ 題<br><strong>涵蓋範圍</strong>：基礎語法、數學運算、字串處理、資料結構、演算法、APCS 競賽題<br><strong>程式語言</strong>：C++</p>
<span id="more"></span>

<hr>
<h2 id="🟢-基礎入門系列"><a href="#🟢-基礎入門系列" class="headerlink" title="🟢 基礎入門系列"></a>🟢 基礎入門系列</h2><h3 id="a001-哈囉"><a href="#a001-哈囉" class="headerlink" title="a001. 哈囉"></a>a001. 哈囉</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=a001">https://zerojudge.tw/ShowProblem?problemid=a001</a><br><strong>解題重點</strong>：基本輸入輸出操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;hello, &quot;</span>&lt;&lt; s &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="a002-簡易加法"><a href="#a002-簡易加法" class="headerlink" title="a002. 簡易加法"></a>a002. 簡易加法</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=a002">https://zerojudge.tw/ShowProblem?problemid=a002</a><br><strong>解題重點</strong>：基本數學運算</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt; a+b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="a003-兩光法師占卜術"><a href="#a003-兩光法師占卜術" class="headerlink" title="a003. 兩光法師占卜術"></a>a003. 兩光法師占卜術</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=a003">https://zerojudge.tw/ShowProblem?problemid=a003</a><br><strong>解題重點</strong>：條件判斷與模運算</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="type">int</span> result = (a * <span class="number">2</span> + b) % <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;普通&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;吉&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">2</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;大吉&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="a004-文文的求婚"><a href="#a004-文文的求婚" class="headerlink" title="a004. 文文的求婚"></a>a004. 文文的求婚</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=a004">https://zerojudge.tw/ShowProblem?problemid=a004</a><br><strong>解題重點</strong>：閏年判斷邏輯</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;a)&#123;</span><br><span class="line">        <span class="type">bool</span> isleapa= (a % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; a % <span class="number">100</span> != <span class="number">0</span>) || (a % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(isleapa)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;閏年\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;平年\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="a005-Eva-的回家作業"><a href="#a005-Eva-的回家作業" class="headerlink" title="a005. Eva 的回家作業"></a>a005. Eva 的回家作業</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=a005">https://zerojudge.tw/ShowProblem?problemid=a005</a><br><strong>解題重點</strong>：等差數列與等比數列判斷</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c, d; </span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (b - a == c - b &amp;&amp; c - b == d - c) &#123;</span><br><span class="line">            <span class="comment">// 等差數列</span></span><br><span class="line">            <span class="type">int</span> e = d + (d - c);</span><br><span class="line">            cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; e &lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (b / a == c / b &amp;&amp; c / b == d / c) &#123;</span><br><span class="line">            <span class="comment">// 等比數列</span></span><br><span class="line">            <span class="type">int</span> e = d * (d / c);</span><br><span class="line">            cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; e &lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="a006-一元二次方程式"><a href="#a006-一元二次方程式" class="headerlink" title="a006. 一元二次方程式"></a>a006. 一元二次方程式</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=a006">https://zerojudge.tw/ShowProblem?problemid=a006</a><br><strong>解題重點</strong>：數學公式應用與判別式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    <span class="type">int</span> d = b*b<span class="number">-4</span>*a*c;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (d&lt;<span class="number">0</span>) &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;No real root&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(d==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">double</span> x1= -b/(<span class="number">2.0</span>*a);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Two same roots x=&quot;</span>&lt;&lt;x1&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="type">double</span> x1= (-b+<span class="built_in">sqrt</span>(d))/(<span class="number">2</span>*a);</span><br><span class="line">        <span class="type">double</span> x2= (-b-<span class="built_in">sqrt</span>(d))/(<span class="number">2</span>*a);</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;Two different roots &quot;</span>&lt;&lt;<span class="string">&quot;x1=&quot;</span>&lt;&lt;x1&lt;&lt;<span class="string">&quot; , x2=&quot;</span>&lt;&lt;x2&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="a024-最大公因數-GCD"><a href="#a024-最大公因數-GCD" class="headerlink" title="a024. 最大公因數(GCD)"></a>a024. 最大公因數(GCD)</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=a024">https://zerojudge.tw/ShowProblem?problemid=a024</a><br><strong>解題重點</strong>：內建函數 <code>__gcd()</code> 的使用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    c = __gcd(a,b);</span><br><span class="line">    cout &lt;&lt; c ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="a034-二進位制轉換"><a href="#a034-二進位制轉換" class="headerlink" title="a034. 二進位制轉換"></a>a034. 二進位制轉換</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=a034">https://zerojudge.tw/ShowProblem?problemid=a034</a><br><strong>解題重點</strong>：進位制轉換邏輯</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; d)&#123;</span><br><span class="line">        string binary = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> temp = d;</span><br><span class="line">        <span class="keyword">if</span>(temp==<span class="number">0</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                binary = <span class="string">&quot;0&quot;</span> + binary;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                binary = <span class="string">&quot;1&quot;</span> + binary;</span><br><span class="line">            &#125;</span><br><span class="line">            temp /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; binary &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="a040-阿姆斯壯數"><a href="#a040-阿姆斯壯數" class="headerlink" title="a040. 阿姆斯壯數"></a>a040. 阿姆斯壯數</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=a040">https://zerojudge.tw/ShowProblem?problemid=a040</a><br><strong>解題重點</strong>：數字拆解與冪運算</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> have = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sp</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    string s = <span class="built_in">to_string</span>(i);</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;s.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">        <span class="type">int</span> spn=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> d = s[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        spn = <span class="built_in">pow</span>(d,s.<span class="built_in">size</span>());</span><br><span class="line">        sum+=spn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum==i)&#123;</span><br><span class="line">        have = <span class="number">1</span>;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> s,e;</span><br><span class="line">    cin &gt;&gt; s &gt;&gt; e;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = s;i &lt;= e;++i)&#123;</span><br><span class="line">        <span class="built_in">sp</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(have == <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="a065-提款卡密碼"><a href="#a065-提款卡密碼" class="headerlink" title="a065. 提款卡密碼"></a>a065. 提款卡密碼</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=a065">https://zerojudge.tw/ShowProblem?problemid=a065</a><br><strong>解題重點</strong>：字串處理與絕對值運算</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;a.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="type">int</span> far = <span class="built_in">abs</span>(a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">        cout &lt;&lt; far ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="a216-數數愛明明"><a href="#a216-數數愛明明" class="headerlink" title="a216. 數數愛明明"></a>a216. 數數愛明明</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=a216">https://zerojudge.tw/ShowProblem?problemid=a216</a><br><strong>解題重點</strong>：遞迴函數的應用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">f</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> n + <span class="built_in">f</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">g</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">f</span>(n) + <span class="built_in">g</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">f</span>(n) &lt;&lt; <span class="string">&quot; &quot;</span>  &lt;&lt; <span class="built_in">g</span>(n) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="a225-明明愛排列"><a href="#a225-明明愛排列" class="headerlink" title="a225. 明明愛排列"></a>a225. 明明愛排列</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=a225">https://zerojudge.tw/ShowProblem?problemid=a225</a><br><strong>解題重點</strong>：自定義排序規則</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; nums;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> temp;</span><br><span class="line">            cin &gt;&gt; temp;</span><br><span class="line">            <span class="type">int</span> unit = temp % <span class="number">10</span>;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(&#123;unit, -temp&#125;); <span class="comment">// 用負號讓原數值由大到小</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cout &lt;&lt; -nums[i].second &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="🔵-板橋高中教學題系列"><a href="#🔵-板橋高中教學題系列" class="headerlink" title="🔵 板橋高中教學題系列"></a>🔵 板橋高中教學題系列</h2><h3 id="b884-電腦教室的傑克"><a href="#b884-電腦教室的傑克" class="headerlink" title="b884. 電腦教室的傑克"></a>b884. 電腦教室的傑克</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=b884">https://zerojudge.tw/ShowProblem?problemid=b884</a><br><strong>解題重點</strong>：座標距離計算與條件判斷</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> n, x, y, r, yee;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            r = <span class="built_in">sqrt</span>((x - <span class="number">0</span>) + (y - <span class="number">0</span>));</span><br><span class="line">            yee = <span class="number">100</span> - r * r;</span><br><span class="line">            <span class="keyword">if</span> (yee &gt; <span class="number">0</span> &amp;&amp; yee &lt;= <span class="number">30</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;sad!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (yee &gt; <span class="number">30</span> &amp;&amp; yee &lt;= <span class="number">60</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;hmm~~&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (yee &gt; <span class="number">60</span> &amp;&amp; yee &lt; <span class="number">100</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Happyyummy&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;evil!!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="b971-等差數列"><a href="#b971-等差數列" class="headerlink" title="b971. 等差數列"></a>b971. 等差數列</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=b971">https://zerojudge.tw/ShowProblem?problemid=b971</a><br><strong>解題重點</strong>：等差數列的輸出格式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a1,an,d;</span><br><span class="line">    cin &gt;&gt; a1 &gt;&gt; an &gt;&gt; d;</span><br><span class="line">    <span class="keyword">while</span>(a1!=an) &#123;</span><br><span class="line">        cout &lt;&lt; a1 &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        a1+=d;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; an;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="d046-文文採西瓜"><a href="#d046-文文採西瓜" class="headerlink" title="d046. 文文採西瓜"></a>d046. 文文採西瓜</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=d046">https://zerojudge.tw/ShowProblem?problemid=d046</a><br><strong>解題重點</strong>：計數與條件判斷</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n,w;</span><br><span class="line">    <span class="type">int</span> c=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        cin&gt;&gt;w;</span><br><span class="line">        <span class="keyword">if</span>(w&lt;=<span class="number">10</span>)</span><br><span class="line">            c=c<span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="d559-班號"><a href="#d559-班號" class="headerlink" title="d559. 班號"></a>d559. 班號</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=d559">https://zerojudge.tw/ShowProblem?problemid=d559</a><br><strong>解題重點</strong>：格式化輸出</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;&#x27;C&#x27; can use printf(\&quot;%d\&quot;,n); to show integer like &quot;</span>&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="e051-文意字彙"><a href="#e051-文意字彙" class="headerlink" title="e051. 文意字彙"></a>e051. 文意字彙</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=e051">https://zerojudge.tw/ShowProblem?problemid=e051</a><br><strong>解題重點</strong>：字串操作與格式化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string word;</span><br><span class="line">    cin &gt;&gt; word;</span><br><span class="line">    cout &lt;&lt; word[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; word.<span class="built_in">size</span>() ; i++)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;_&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; word[word.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="🟡-進階演算法"><a href="#🟡-進階演算法" class="headerlink" title="🟡 進階演算法"></a>🟡 進階演算法</h2><h3 id="b266-矩陣翻轉-–-2016-APCS-實作題第二題"><a href="#b266-矩陣翻轉-–-2016-APCS-實作題第二題" class="headerlink" title="b266. 矩陣翻轉 – 2016 APCS 實作題第二題"></a>b266. 矩陣翻轉 – 2016 APCS 實作題第二題</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=b266">https://zerojudge.tw/ShowProblem?problemid=b266</a><br><strong>解題重點</strong>：矩陣操作與座標轉換</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ft</span>(<span class="type">int</span> &amp;R,<span class="type">int</span> &amp;C,<span class="type">int</span> &amp;M,vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp;m)&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;res = m;</span><br><span class="line">    <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">st</span>(<span class="type">int</span> &amp;R,<span class="type">int</span> &amp;C,<span class="type">int</span> &amp;M,vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp;m)&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">res</span>(C, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(R));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; R; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; C; ++j)</span><br><span class="line">            res[C - <span class="number">1</span> - j][i] = m[i][j]; <span class="comment">// 逆時針旋轉公式</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">swap</span>(R, C);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> R,C,M;</span><br><span class="line">    cin &gt;&gt; R &gt;&gt; C &gt;&gt; M;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">m</span>(R,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(C));</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">d</span>(M);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;R;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;C;j++)&#123;</span><br><span class="line">            cin &gt;&gt; m[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        cin &gt;&gt; d[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">reverse</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (d[i] == <span class="number">1</span>)&#123;</span><br><span class="line">            m=<span class="built_in">ft</span>(R, C, M, m);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            m=<span class="built_in">st</span>(R, C, M, m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; R &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; C &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;R;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;C;j++)&#123;</span><br><span class="line">            cout &lt;&lt; m[i][j];</span><br><span class="line">            <span class="keyword">if</span>(j!=C<span class="number">-1</span>)&#123;</span><br><span class="line">                cout &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="c291-APCS-2017-0304-2小群體-–-2017年-3月-APCS"><a href="#c291-APCS-2017-0304-2小群體-–-2017年-3月-APCS" class="headerlink" title="c291. APCS 2017-0304-2小群體 – 2017年 3月 APCS"></a>c291. APCS 2017-0304-2小群體 – 2017年 3月 APCS</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=c291">https://zerojudge.tw/ShowProblem?problemid=c291</a><br><strong>解題重點</strong>：圖論中的連通組件計算</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">frd</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">ed</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; frd[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> group = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!ed[i])&#123;</span><br><span class="line">            <span class="type">int</span> tmp = i;</span><br><span class="line">            <span class="keyword">while</span>(!ed[tmp])&#123;</span><br><span class="line">                ed[tmp]=<span class="number">1</span>;</span><br><span class="line">                tmp=frd[tmp];</span><br><span class="line">            &#125;</span><br><span class="line">            group++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; group &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="c315-I-ROBOT-前傳"><a href="#c315-I-ROBOT-前傳" class="headerlink" title="c315. I, ROBOT 前傳"></a>c315. I, ROBOT 前傳</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=c315">https://zerojudge.tw/ShowProblem?problemid=c315</a><br><strong>解題重點</strong>：座標移動模擬</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a,b;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">0</span>)&#123;       <span class="comment">// 北</span></span><br><span class="line">            y+=b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">1</span>)&#123;       <span class="comment">// 東</span></span><br><span class="line">            x+=b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">2</span>)&#123;       <span class="comment">// 南</span></span><br><span class="line">            y-=b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">3</span>)&#123;       <span class="comment">// 西</span></span><br><span class="line">            x-=b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="🔴-APCS-競賽題"><a href="#🔴-APCS-競賽題" class="headerlink" title="🔴 APCS 競賽題"></a>🔴 APCS 競賽題</h2><h3 id="o076-1-特技表演-–-2024年6月-APCS"><a href="#o076-1-特技表演-–-2024年6月-APCS" class="headerlink" title="o076. 1. 特技表演 – 2024年6月 APCS"></a>o076. 1. 特技表演 – 2024年6月 APCS</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=o076">https://zerojudge.tw/ShowProblem?problemid=o076</a><br><strong>解題重點</strong>：連續遞減序列的最大長度計算</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,count=<span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">nums</span>(n);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;counts;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i<span class="number">-1</span>]&gt;nums[i])&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            counts.<span class="built_in">push_back</span>(count);</span><br><span class="line">            count =<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        counts.<span class="built_in">push_back</span>(count);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; *<span class="built_in">max_element</span>(counts.<span class="built_in">begin</span>(),counts.<span class="built_in">end</span>())<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="q182-2-字串操作-–-2025年1月-APCS"><a href="#q182-2-字串操作-–-2025年1月-APCS" class="headerlink" title="q182. 2. 字串操作 – 2025年1月 APCS"></a>q182. 2. 字串操作 – 2025年1月 APCS</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=q182">https://zerojudge.tw/ShowProblem?problemid=q182</a><br><strong>解題重點</strong>：字串變換操作的實現</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string str;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">s</span><span class="params">(string &amp;str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>() - <span class="number">1</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] &gt; str[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(str[i], str[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">p</span><span class="params">(string &amp;str, string &amp;tamp)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> h = str.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">char</span>&gt; <span class="title">a</span><span class="params">(h)</span>, <span class="title">b</span><span class="params">(h)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; h; i++) &#123;</span><br><span class="line">        a[i] = str[i];</span><br><span class="line">        b[i] = str[h + i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tamp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; h; i++) &#123;</span><br><span class="line">        tamp += a[i];</span><br><span class="line">        tamp += b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; str &gt;&gt; k;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">kind</span><span class="params">(k)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        cin &gt;&gt; kind[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (kind[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; str.<span class="built_in">size</span>() - <span class="number">1</span>; j += <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(str[j], str[j + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (kind[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">s</span>(str);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            string tamp;</span><br><span class="line">            <span class="built_in">p</span>(str, tamp);</span><br><span class="line">            str = tamp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="q836-1-小心陷阱-–-2025年6月-APCS"><a href="#q836-1-小心陷阱-–-2025年6月-APCS" class="headerlink" title="q836. 1. 小心陷阱 – 2025年6月 APCS"></a>q836. 1. 小心陷阱 – 2025年6月 APCS</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=q836">https://zerojudge.tw/ShowProblem?problemid=q836</a><br><strong>解題重點</strong>：遊戲模擬與條件判斷</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k, x1, x2, y1, y2;</span><br><span class="line">    cin &gt;&gt; k &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> position = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> health = k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (health &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        position += health;</span><br><span class="line">        <span class="type">int</span> damage = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (position % x1 == <span class="number">0</span>) &#123;</span><br><span class="line">            damage += y1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (position % x2 == <span class="number">0</span>) &#123;</span><br><span class="line">            damage += y2;</span><br><span class="line">        &#125;</span><br><span class="line">        health -= damage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; position &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="q837-2-轉盤得分-–-2025年6月-APCS"><a href="#q837-2-轉盤得分-–-2025年6月-APCS" class="headerlink" title="q837. 2. 轉盤得分 – 2025年6月 APCS"></a>q837. 2. 轉盤得分 – 2025年6月 APCS</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=q837">https://zerojudge.tw/ShowProblem?problemid=q837</a><br><strong>解題重點</strong>：陣列旋轉與統計計算</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">turn</span><span class="params">(<span class="type">int</span> b, vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; &amp;arr, <span class="type">int</span> row)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = arr[row].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span> || len == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> times = <span class="built_in">abs</span>(b % len);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt; times; z++) &#123;</span><br><span class="line">            <span class="type">char</span> tmp = arr[row].<span class="built_in">back</span>();</span><br><span class="line">            arr[row].<span class="built_in">pop_back</span>();</span><br><span class="line">            arr[row].<span class="built_in">insert</span>(arr[row].<span class="built_in">begin</span>(), tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt; times; z++) &#123;</span><br><span class="line">            <span class="type">char</span> tmp = arr[row][<span class="number">0</span>];</span><br><span class="line">            arr[row].<span class="built_in">erase</span>(arr[row].<span class="built_in">begin</span>());</span><br><span class="line">            arr[row].<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">score</span><span class="params">(<span class="type">const</span> vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; n; ++col) &#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; freq;</span><br><span class="line">        <span class="type">int</span> maxCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; m; ++row) &#123;</span><br><span class="line">            maxCount = <span class="built_in">max</span>(maxCount, ++freq[arr[row][col]]);</span><br><span class="line">        &#125;</span><br><span class="line">        total += maxCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; <span class="built_in">arr</span>(m, <span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;(n));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            cin &gt;&gt; arr[i][j];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> totalScore = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; k; t++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> b;</span><br><span class="line">            cin &gt;&gt; b;</span><br><span class="line">            <span class="built_in">turn</span>(b, arr, i);</span><br><span class="line">        &#125;</span><br><span class="line">        totalScore += <span class="built_in">score</span>(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; totalScore &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="🟠-TOI-練習賽"><a href="#🟠-TOI-練習賽" class="headerlink" title="🟠 TOI 練習賽"></a>🟠 TOI 練習賽</h2><h3 id="m396-煲仔飯-ClayPotRice-–-TOI-練習賽-202310-新手組-第1題"><a href="#m396-煲仔飯-ClayPotRice-–-TOI-練習賽-202310-新手組-第1題" class="headerlink" title="m396. 煲仔飯 (ClayPotRice) – TOI 練習賽 202310 新手組 第1題"></a>m396. 煲仔飯 (ClayPotRice) – TOI 練習賽 202310 新手組 第1題</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=m396">https://zerojudge.tw/ShowProblem?problemid=m396</a><br><strong>解題重點</strong>：簡單的加法與條件判斷</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t, g, w, e, b;</span><br><span class="line">    cin &gt;&gt; t &gt;&gt; g &gt;&gt; w &gt;&gt; e &gt;&gt; b;</span><br><span class="line">    <span class="type">int</span> a = g + w + e + b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (a &lt;= t) &#123;</span><br><span class="line">        cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="n630-電影院-Cinema"><a href="#n630-電影院-Cinema" class="headerlink" title="n630. 電影院 (Cinema)"></a>n630. 電影院 (Cinema)</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=n630">https://zerojudge.tw/ShowProblem?problemid=n630</a><br><strong>解題重點</strong>：時間處理與結構體應用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">movtime</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">tm</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h * <span class="number">60</span> + m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; h &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">             &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; m &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;movtime&gt; <span class="title">times</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; times[i].h &gt;&gt; times[i].m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    movtime now;</span><br><span class="line">    cin &gt;&gt; now.h &gt;&gt; now.m;</span><br><span class="line">    <span class="type">int</span> ntm = now.<span class="built_in">tm</span>() + <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> movtime&amp; movie : times) &#123;</span><br><span class="line">        <span class="keyword">if</span> (movie.<span class="built_in">tm</span>() &gt;= ntm) &#123;</span><br><span class="line">            movie.<span class="built_in">print</span>();</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Too Late&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="n631-撲克-Poker"><a href="#n631-撲克-Poker" class="headerlink" title="n631. 撲克 (Poker)"></a>n631. 撲克 (Poker)</h3><p><strong>題目連結</strong>：<a href="https://zerojudge.tw/ShowProblem?problemid=n631">https://zerojudge.tw/ShowProblem?problemid=n631</a><br><strong>解題重點</strong>：統計與數學邏輯（包含錯誤思路的反思）</p>
<p><strong>💡 解題心得</strong>：這題我一開始理解錯誤，用排序觀察的方式估算，實際上應該用「每個牌號出現次數」來精準計算。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正解</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(<span class="number">53</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        cnt[k]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> last = *<span class="built_in">min_element</span>(cnt.<span class="built_in">begin</span>() + <span class="number">1</span>, cnt.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> most = *<span class="built_in">max_element</span>(cnt.<span class="built_in">begin</span>() + <span class="number">1</span>, cnt.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> tn = most * <span class="number">52</span>;</span><br><span class="line">    <span class="type">int</span> add = tn - n;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; last &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; add &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="📈-解題統計與心得"><a href="#📈-解題統計與心得" class="headerlink" title="📈 解題統計與心得"></a>📈 解題統計與心得</h2><h3 id="🎯-按難度分布"><a href="#🎯-按難度分布" class="headerlink" title="🎯 按難度分布"></a>🎯 <strong>按難度分布</strong></h3><ul>
<li><strong>🟢 基礎入門</strong>：15 題 (37.5%)</li>
<li><strong>🔵 板橋高中教學題</strong>：5 題 (12.5%)</li>
<li><strong>🟡 進階演算法</strong>：3 題 (7.5%)</li>
<li><strong>🔴 APCS 競賽題</strong>：4 題 (10%)</li>
<li><strong>🟠 TOI 練習賽</strong>：3 題 (7.5%)</li>
</ul>
<h3 id="💭-解題心得"><a href="#💭-解題心得" class="headerlink" title="💭 解題心得"></a>💭 <strong>解題心得</strong></h3><ol>
<li><strong>基礎很重要</strong>：從 a001 到 a006 的基礎題培養了對 C++ 語法的熟悉度</li>
<li><strong>數學思維</strong>：許多題目需要將問題抽象化為數學模型</li>
<li><strong>算法理解</strong>：APCS 題目需要更深層的算法思考</li>
<li><strong>錯誤反思</strong>：如 n631 撲克牌題，記錄錯誤思路有助於避免重複犯錯</li>
</ol>
<h3 id="🚀-技術成長軌跡"><a href="#🚀-技術成長軌跡" class="headerlink" title="🚀 技術成長軌跡"></a>🚀 <strong>技術成長軌跡</strong></h3><ul>
<li><strong>階段一</strong>：基本語法與輸入輸出</li>
<li><strong>階段二</strong>：條件判斷與迴圈應用</li>
<li><strong>階段三</strong>：陣列與字串處理</li>
<li><strong>階段四</strong>：演算法與資料結構</li>
<li><strong>階段五</strong>：競賽題目的綜合應用</li>
</ul>
<h3 id="🎓-學習收穫"><a href="#🎓-學習收穫" class="headerlink" title="🎓 學習收穫"></a>🎓 <strong>學習收穫</strong></h3><ul>
<li>熟練掌握 C++ STL 的使用</li>
<li>培養將實際問題抽象化的能力</li>
<li>建立系統性的解題思維模式</li>
<li>學會從錯誤中反思改進</li>
</ul>
<hr>
<p><em>📝 最後更新：2025-10-11 15:30:00</em><br><em>📊 總題數：40+ 題</em><br><em>🎯 持續更新中…</em></p>
]]></content>
      <categories>
        <category>程式開發</category>
      </categories>
      <tags>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
</search>
